{"/Onboarding/pages/apresentacao/": {
    "title": "Apresentação",
    "keywords": "Jekyll",
    "url": "/Onboarding/pages/apresentacao/",
    "body": "A maioria das empresas de tecnologia trabalhava com uma abordagem mais tradicional e sequencial, conhecida como “cascata”. Essa abordagem envolve uma fase de planejamento detalhado, seguida por uma fase de design, depois uma fase de implementação e, finalmente, uma fase de testes. No entanto, com a crescente complexidade dos projetos de software, muitas empresas perceberam que essa abordagem era muito rígida e inflexível. Surgiu então a metodologia ágil, que se concentra em colaboração, iteração e flexibilidade. Para acelerar o aprendizado e disseminar a cultura de inovação ágil, é importante que as empresas invistam em treinamento e desenvolvimento para seus funcionários. Isso pode incluir cursos de treinamento específicos sobre metodologias ágeis, como Scrum e Kanban, bem como a criação de equipes multidisciplinares e grupos de discussão para compartilhar ideias e práticas. Além disso, as empresas devem incentivar seus funcionários a experimentar novas ideias e abordagens. Isso pode envolver a criação de um ambiente seguro para tentativas e erros, bem como a celebração dos sucessos e aprendizados. Outra maneira de acelerar o aprendizado e disseminar a cultura de inovação ágil é por meio da implementação de ferramentas e tecnologias que suportem o processo de desenvolvimento ágil. Isso pode incluir ferramentas de gerenciamento de projetos, ferramentas de colaboração e comunicação, bem como plataformas de automação e integração contínua. Em resumo, para acelerar o aprendizado e disseminar a cultura de inovação ágil, as empresas devem investir em treinamento e desenvolvimento, incentivar a experimentação e implementar ferramentas e tecnologias que suportem o processo de desenvolvimento ágil. Com essas medidas, as empresas podem criar equipes mais produtivas e inovadoras, capazes de lidar com os desafios da indústria de tecnologia em constante evolução. O que você encontrará aqui Como surgiu o livro que você tem em mãos Inicialmente, é importante discutir os elementos que, em minha opinião, são fundamentais para compor a estrutura de um curso eficiente, independentemente de ser presencial ou online. Acredito que a aprendizagem dos alunos é mais significativa quando eles experimentam as seguintes condições: Ativa participação: os estudantes são incentivados a participar ativamente das atividades, discussões e projetos propostos pelo curso, o que os torna protagonistas do processo de aprendizagem; Responsabilidade pela própria aprendizagem: é fundamental que os alunos sejam encorajados a assumir a responsabilidade por seu próprio aprendizado, o que os estimula a buscar o conhecimento e a resolver problemas de forma autônoma; Controle significativo sobre a experiência: os alunos devem ter um papel ativo na construção de sua própria experiência de aprendizagem, podendo escolher entre diferentes abordagens e metodologias, de acordo com suas necessidades e interesses. Essas condições são essenciais para que os alunos se sintam motivados e engajados, desenvolvam habilidades e competências relevantes e, consequentemente, alcancem melhores resultados em seu processo de aprendizagem. Para alcançar esses objetivos, é fundamental que nós, como educadores, atuemos como facilitadores da aprendizagem, orientando a experiência de forma cuidadosa e respeitando a autonomia dos alunos. Nesse sentido, é importante adotar uma postura mais flexível e adaptativa, permitindo que os estudantes tenham a liberdade de explorar, experimentar e descobrir, com o apoio e a supervisão necessários. Desse modo, poderemos oferecer um ensino mais personalizado, que atenda às necessidades individuais dos alunos e promova o desenvolvimento de habilidades e competências relevantes para o seu futuro. Essa metodologia já foi aplicada com sucesso em diversas disciplinas, bem como em programas de mentoria e residência TIC. Um exemplo bem-sucedido é o programa de mentoria Big Open Source Siblings - BOSS (https://github.com/BOSS-BigOpenSourceSister/BigSister), cuja metodologia foi premiada pelo GNOME Community Engagement Challenge (https://www.gnome.org/challenge/). Em um concurso que contou com a participação de 150 projetos, o BOSS conquistou o primeiro lugar, comprovando a eficácia da metodologia na promoção de uma aprendizagem significativa e colaborativa. Além disso, a metodologia já foi experiênciada por mais de 500 alunos de graduação do curso de Engenharia de Software da Universidade de Brasília (https://github.com/fga-eps-mds). Esses resultados evidenciam a importância de uma abordagem mais personalizada e flexível na educação, que valorize o protagonismo dos alunos e sua participação ativa na construção do conhecimento. Além disso, mostram que é possível inovar e reinventar práticas pedagógicas, por meio do uso criativo de tecnologias e metodologias de ensino."
  },"/Onboarding/pages/about/": {
    "title": "Sobre a autora",
    "keywords": "Jekyll",
    "url": "/Onboarding/pages/about/",
    "body": "Carla Rocha (carlarocha.org) é professora de Engenharia de Software na Universidade de Brasília. Desde 2015 aprimora práticas para ensino baseados em experiência, no qual os participantes desenvolvem e/ou contribuem para projetos de Software Livre. Durante as semanas que os participantes desenvolvem os projetos, são paresentados em encontros síncrono o conteúdo teórico que os participantes já estão tendo experiência. Essa metodologia já foi aplicada em diversas disciplinas, e em programas de mentoria e residência TIC. No programa de mentoria Big Open Source Siblings - BOSS (https://github.com/BOSS-BigOpenSourceSister/BigSister), a metodologia foi premiada pelo GNOME Community Engagement Challenge (https://www.gnome.org/challenge/). De 150 projetos, o programa BOSS foi premiado em primeiro Lugar https://www.gnome.org/challenge/winners/. É uma das coordenadoras do Laboratório Avançado de Pesquisa, Produção e Inovação de Software (LAPPIS), no qual coordena/coordenou diversos projetos em colaboração com a Iniciativa privada e Pública, no desenvolvimento de soluções de softwares inovadores. Mais de 60 bolsistas já colaboraram no laboratório sob minha coordenação desde 2017. A metodologia apresentada também é aplicada no laboratório, e a maior parte dos projetos envolvidos resultam em projetos de software livre. Dentre os temas de pesquisa, destaca DevOps (adoção e estrutura de times), métodos ágeis, Produtos de Mahcine Learning e ensino. Mais informações sobre a autora (projetos atuais, pesquisa atual) podem ser encontradas no site carlarocha.org. Contato: caguiar@unb.br"
  },"/Onboarding/pages/contact/": {
    "title": "Público-alvo do livro",
    "keywords": "Jekyll",
    "url": "/Onboarding/pages/contact/",
    "body": "Se você escolheu este livro porque é uma pessoa interessada em trabalhar com equipes multidisciplinares, auto didatas, produtivas e inovadoras. Se você não sabe por onde começar para promover esse modelo de aprendizado/trabalho, você está no lugar certo. Se você deseja se tornar um engenheiro de Software que domine tanto as habilidades técnicas quanto as habilidades não técnicas exigidas pelo mercado, espero que este livro forneça algumas dicas úteis. Este livro se concentra mais na estruturação execução do processo de Onboarding como método de ensino, e usa como estudo de caso o ensino práticos de métodos ágeis no desenvolvimento de projetos de software livre. Isso permitir que intrutores, educadores e estudantes universitários possam se beneficiar desse modelo de ensino-aprendizado. Este livro foi escrito tendo em mente dois grupos principais: Professores, intrutores e gestores que desejam utilizar práticas de onboarding para engajar e otimizar o aprendizado baseado em experiência. Estudantes de Engenharia de Software, ciência da computação, engenharia da Produção e outros alunos universitários que queiram aprender sobre as metodologias ágeis na prática. Imagino que a maioria dos leitores deste livro saiba desenvolver projetos de software. A segunda parte do livro, onde estão as perguntas, é bastante focado na metodologia de como planejar e organizar um ciclo de aprendizagem utilizando a metodologia proposta. No entanto, como os métodos ágeis encontra seu uso em mais setores o campo precisa de mais pessoas com interesses diversos. Se você está interessado em métodos ágeis e desenvolvimento de software, mas hesita em segui-lo porque não possui um diploma de engenharia, eu o encorajo fortemente a explorá-lo. Este livro, especialmente a primeira parte, pode atender a algumas de suas necessidades."
  },"/Onboarding/jekyll/2023-02-24-Execucao.html": {
    "title": "Parte II - Execução",
    "keywords": "Jekyll",
    "url": "/Onboarding/jekyll/2023-02-24-Execucao.html",
    "body": "Visão Geral Uma estratégia eficaz de aprendizagem deve integrar conceitos teóricos com sua aplicação prática, seguindo o princípio de “aprender fazendo”. Sem prática, não há aprendizado significativo. Portanto, o processo de ensino-aprendizagem deve incluir duas etapas fundamentais: sessões de assimilação de conceitos teóricos e sessões de prática. Embora o uso de casos acadêmicos possa ser útil, ele pode fornecer uma perspectiva limitada e estreita sobre o problema. Por isso, é fundamental preparar os alunos para a realidade do mercado de trabalho, especialmente em setores como desenvolvimento de software, que estão passando por mudanças significativas com a adoção da cultura DevOps. A integração da teoria com a prática permite que os alunos desenvolvam habilidades práticas e estejam prontos para enfrentar desafios reais em suas carreiras. Esse capítulo é dedicado aos participantes do processo do processo de onboarding com o objetivo de aprender sobre Métodos de Desenvolvimento de Software, mais especificamente aprender os conceitos e práticas relacionados aos métodos ágeis. É a concretização do planejamento realizado na etapa anterior. Roadmap do Onboard Recepção + Orientações gerais A primeira etapa da metodologia envolve ciclos de introdução às informações gerais necessárias para iniciar o projeto, formação das equipes, definição de papéis, escolha de ferramentas e práticas para acolher os participantes. A duração dessa etapa pode variar dependendo da frequência dos encontros. Por exemplo, se houver dois encontros semanais, a primeira etapa pode durar até duas semanas. Já se houver apenas um encontro semanal, a primeira etapa pode durar até um mês. Objetivo Acolher novos colaboradores, e apresentar informações sobre a cultura e os processos, além de conhecer os colegas de trabalho. Propomos sessões práticas focadas no desenvolvimento de projetos Open Source, onde os alunos têm a oportunidade de desenvolver o código-fonte, planejar e automatizar o pipeline de implantação, adotando práticas, ferramentas e orientação da comunidade OSS, conforme descrito na Tabela abaixo. Papéis do Aluno Tech lead, Estrategista de produto, Desenvolvedores, Arquiteto de Software, Engenheiro de DevOps Funções não estudantis (partes interessadas) Professor, instrutor, cliente (opcional), profissionais de mercado, ex-alunos Releases 2 Releases (Viabilidade Técnica e Prova de Conceito final) Ponto de Partida Ideia fornecida aos alunos por qualquer parte interessada Horários de trabalho da equipe Toda a equipe se reúne 5-8 horas por semana Reuniões Equipa de estudantes reúne semanalmente com stakeholders Gestão de Projetos do dia-a-dia Gerenciada pela equipe de estudantes Práticas de Desenvolvimento Definido por equipe de alunos (Scrum, XP, lean, entre outros) Tecnologias de Desenvolvimento Selecionada pela equipe de alunos Testes cobertura de teste de unidade obrigatória de 90%; Teste de integração também são obrigatórios Conjunto de ferramentas DevOps Selecionado pela equipe de alunos Pipeline Necessário para a implementação: conteinerização, integração contínua, análise de código estático, conformidade com folhas de estilo, automação de teste, pipeline de implantação automatizada e um modo de ramificação de controle de origem Padrões OSS Padrões da comunidade OSS devem ser adotados É interessante destacar que essa abordagem de deixar os alunos lutarem e procurarem informações por conta própria faz parte do modelo de aprendizagem experiencial de David Kolb, que valoriza a autodescoberta e a aprendizagem autônoma como elementos-chave para o processo de aprendizagem. O curso não fornece um plano detalhado para a entrega final do projeto, o que se assemelha aos projetos de software reais. Essa decisão central é deixada para as equipes, o que lhes permite exercitar suas habilidades de gestão e decisão, além de incentivar a colaboração com outras equipes, mentores e professores. Isso inclui a definição de processos, conjunto de ferramentas, pipeline de entrega, automação, ambiente de execução, monitoramento, atribuição de tarefas, entregas, treinamento da equipe, entre outros aspectos. Aprender com base na experiência é mais importante e benéfico do que uma abordagem puramente teórica, pois evidencia como os conceitos técnicos e não técnicos estão interconectados e ambos impactam a entrega final. Vários alunos relataram a dificuldade inicial em tomar decisões e a insegurança de não ter uma lista de tarefas pré-definida. No entanto, eles reconheceram a importância da tomada de decisão para compreender os elementos que impactam a entrega contínua. Além disso, ao apresentar os entregáveis esperados em macro atividades, permite-se que os alunos tenham liberdade para definir seus próprios caminhos e desenvolver suas habilidades não técnicas, o que pode ser extremamente valioso para sua formação como desenvolvedores. Nessa etapa são desenvolvidas várias habilidades não técnicas, como comunicação efetiva, auto aprendizagem, gestão de horas, gestão des conflitos, agir mesmo com pouca informação. Esse setup é bastante próximo de início de projetos no mercado. Papéis Cada aluno desempenha um papel único em uma equipe DevOps, que se assemelha a uma equipe de produto, com a responsabilidade coletiva de “Você construiu, você executa”. As funções, suas responsabilidades e entregas são as seguintes: Scrum Master/Tech Leader: Responsável pela execução de conceitos e práticas de gerenciamento de projetos. Entregáveis esperados incluem documentação de processo, métricas de produtividade e análise e avaliação contínuas da maturidade das práticas ágeis da equipe. Estrategista de Produto: Responsável pela execução de conceitos e práticas de gestão de produto. Essa função deve descrever as personas do usuário, como o produto se encaixa no mercado atual e como atingirá as metas de negócios. Entregáveis esperados incluem planos de produtos, roteiro, plano de negócios, testes de usabilidade e identidade visual do produto. Arquiteto de Software: Responsável pela execução de conceitos e práticas de gerenciamento de produtos e categorias de processo de construção. Essa função lida com o aplicativo e seu fluxo de dados definindo estruturas, ferramentas e tecnologias. Entregáveis esperados incluem definição e documentação de arquitetura, seleção de linguagem de programação, uso de serviços externos (Open Source), reutilização de funcionalidades e integração de serviços e definição de critérios de qualidade. Engenheiro de Release/DevOps: Responsável pela execução de conceitos e práticas das categorias de integração contínua, automação de implantação e monitoramento e registro. Essa função define os estágios do pipeline de implantação, as ferramentas de automação, configura esse pipeline nos ambientes de preparação e produção. Entregáveis esperados incluem documentação, implementação de estágios de pipeline, automação de implantação contínua e testes automatizados. Monitorar o ambiente de produção é opcional. Equipe de Desenvolvimento: Implementa o backlog do produto em funcionalidade potencialmente entregável seguindo tecnologias estabelecidas e critérios de qualidade. Entregáveis esperados incluem o código-fonte do projeto, testes de unidade, comunicação via problemas e execução de práticas de software de código aberto. Professor: Auxilia no gerenciamento de riscos, apresenta conceitos teóricos relacionados ao DevOps e facilita a comunicação com outras partes interessadas. Instrutor: Auxilia a equipe com treinamento e feedback sobre ferramentas, tecnologias e melhores práticas no desenvolvimento de produtos de software de código aberto. Eles ajudam na cultura de colaboração e compartilham suas lições aprendidas. É dada aos alunos total autonomia para auto-organização, para que pudessem experimentar trabalhar em um ambiente similar a empresas. Os alunos recebem total autonomia para decidir como querem organizar suas equipes. A maioria dos alunos se destaca com a autonomia total e elogiou o aspecto de autoaprendizagem do curso. Como um aluno explicou: “A diferença crucial neste curso que o destaca de todas as outras ofertas de cursos na universidade é a imensa mudança em direção à autoaprendizagem e independência de uma equipe de ensino/apoio. A quantidade de trabalho necessária rapidamente aumentou de um sprint para o próximo - o que significou que eu precisava explorar novas abordagens para aprender e, mais importante, colaborar com os outros”. Tópicos/Temas de projetos Os temas do projeto são apresentados no primeiro dia e sugeridos por praticantes, ex-alunos e potenciais clientes, dando às equipes autonomia para escolher o escopo do projeto, a stack tecnologica, a arquitetura de software e as ferramentas de automação. Com o objetivo de simular a experiência de múltiplas equipes da indústria, o projeto deste ano envolveu a concepção e implementação de um software de agendamento de cursos universitários para o departamento de Engenharia de Software e Ciência da Computação da nossa universidade, utilizando práticas Scrum. Apesar de parecer um projeto simples, considerou-se que ambos os departamentos não possuíam atualmente um programa de agendamento de cursos. As restrições do projeto são importantes para limitar o escopo do projeto, estabelecer os critérios e checklist de avaliação, orientar o planejamento, execução e priorização das tarefas. Elas também ajudam os instrutores a avaliar continuamente os riscos do projeto e dar feedback constante às equipes, de acordo com os limites definidos pelas restrições. A comunidade OSS tem uma série de padrões recomendados com foco na construção de comunidades acolhedoras. Essas práticas visam manter normas, qualidade de código, padrões técnicos, comunicação, disseminação de conhecimento, conscientização da equipe, compartilhamento de propriedade e dar boas-vindas continuamente aos novos membros. Não abordamos neste trabalho os critérios detalhados de avaliação dos alunos. Baseados fortemente nas comunidades e padrões OSS, definimos um conjunto de restrições de projeto para orientar a tomada de decisão dos alunos: Ambientes: cada equipe deve ter ambientes de teste e produção disponíveis; Padrões OSS: os padrões da comunidade OSS devem ser adotados. Padronização e problemas de modelo, modelo de branch de controle de origem, documentação do projeto, pipeline de implantação, comunicação de problemas e feedback em Pull Requests são exemplos de padrão OSS; Ciclos de entrega: existem dois lançamentos oficiais significativos no curso, nos quais as equipes apresentam suas soluções a um conselho de avaliação. Práticas Obrigatórias Categorias Conceitos Práticas Gestão de Produto (Processo/Pessoas) Microservice; Product quality; Customer satisfaction; Small features; Artifact management; Release engineering; Knowledge, Skills, and Capabilities; Programing educations; Quality assurance; and Artifact management. OSS Documentation standards; unit test; review; licensing; pair revision and code review; architecture structure; product documentation; and pipeline stage documentation. Gestão de Projetos (Processo/Pessoas) Gestão de pessoas; Short feedback cycle; Pilots team and lead customer; Compliance regulations; Team experience; Aligning incentives; Breaking down silos; Culture of collaboration; Versioning; Sharing knowledge; Programing educations; Global community knowledge; Failure as opportunity of improvement; ollaborate across departments; Knowledge, skills, and capabilities; and Artifact management. Sprint; Kanban; planing; review; Stand-up metting; dojos; Tasks in issues; training; OSS Recommended Standards; Post mortem; code of contributing; Communication in issue and PR; Full-stack and self organized teams; git-flow; pull request; process documentation; badges status in readme; tracking metrics; and pair revision. Processo de Build (Entrega) Release engineering; Continuous delivery; Automation; Testing automation; Correctness; and Static analysis. Deployment pipeline stages; Automation; Unit test; Integration tests; and components tests. Integração Contínua (Entrega) Frequent and reliable release process; Release engineering; Deployment pipeline; Continuous integration; Automation; and Continuous delivery. Build and deploy automated; badges status in readme; and git-flow. Deployment Contínua (Entrega/Runtime) Frequent and reliable release process; Release engineering; Continuous delivery; Configuration management; Automation; Infrastructure as code; Virtualization; and Containerization. Git-flow; Continuous Integration; Build and Deploy automated; Architecture Structure; Documentation; and pipline stage documentation. Monitoramento &amp; Logging (Entrega/Runtime) You built it, you run it; Availability; After-hours support for Devs; Alerting; Continuous runtime monitoring; Security; Performance; Automation Metrics; Experiments Log management; Reliability; and Scalability Resilience. Operation tasks in issues; Logging; Monitoring; and Benchmark. Entregáveis Embora o foco principal do curso fosse o desenvolvimento do projeto para avaliar o resultado da aprendizagem, foram estabelecidos alguns outros entregáveis ao longo do período. A lista de entregáveis inclui: Documento de especificação de requisitos (Roadmap, StoryMap) Planejamento, demonstração e retrospectiva para cada sprint Revisão por pares para cada sprint Logbook para cada sprint 4 postagens de blog reflexivas baseadas em leituras obrigatórias Documentação do projeto de acordo com padrões de Software Livre e relatório final (Release notes) Apresentação final O logbook, ou diário de bordo, é uma ferramenta utilizada para cada aluno registrar as atividades realizadas pelos durante cada sprint, bem como o número de horas dedicadas a cada uma delas. Essa prática permite uma melhor gestão do tempo e das atividades, além de facilitar o monitoramento do progresso individual de cada estudante. Na última semana, cada equipe é solicitada a apresentar uma demonstração ao vivo da solução para o cliente e realizar uma apresentação final. Além disso, cada equipe escreve um relatório final contendo todas as decisões de projeto, suposições e resultados obtidos. Timeline do projeto A metodologia apresentada pode ser aplicada em vários timelines. Comunicação Um elemento central das metodologias ágeis é uma comunicação efeitva. Essa mesma comunicação efetiva é adotada por comunidades de software livre. Para isso, as práticas e cultura de comunicação efetiva deve ser estimulado e respeitado desde o primeiro encontro. Uma comunicação efetiva começa por estabelecer os canais de comuncação e o tipo de comunicação se dar por cada canal. Por exemplo, se há um canal específico de dar informes, ele não deve ser usado para tirar dúvidas ou compartilhar informações relacionados ao projeto. Aqui vão os principais tipos de comunicação adotados por comunicades de software livre e empresas: Issues: qualquer tarefa relacionada ao projeto deve ser documentada como uma issue. Se alguma decisão sobre uma issue é tomada (por exemplo em um pareamento, reunião), essa decisão deve ser posteriormente documentada na issue. A escrita das issues devem ser padronizadas para facilitar a compreensão de newcomers e acompanhamento do projeto. Por isso para cada tipo de issue (tarefa, User Story, Epico, etc) é necessário um template adequado. A issue é o principal canal de comunicação assincrona da equipe de desenvolvimento. Canal de comunicação por squad: cada squad/time deve escolher seu próprio canal de comunicação, seja o slack, servidor discord, grupo telegram/whatsapp. Normalmente esses canais servem para comunicações rápidas, coloquiais. Canal de comunicação geral: gerido pelo professor/gestor, esse canal reune participantes, instrutores, mentores e clientes. Aqui são trocadas mensagens sobre andamento do projeto, informes gerais, alinhamento de datas/artefatos de entrega. Canal de dúvidas: canal gerido pelos instrutores e squads para tirar dúvidas técnicas, pedido de análise dos artefatos, agendamento de treinamento sob demanada. Repositório: Toda a documentação técnica para comunicar artefatos de projeto devem ser compoartilhado em um repositório aberto, seguindo os templates, boas práticas e organização de comunidades de software livre. Checklist Segue um checklist para ajudar na organização do evento de recepção: Definir dos dias/horários/local dos encontros semanais Apresentar a visão geral do processo de onboarding Apresentar as listas de Entregáveis para a Release I e Release II Definir as datas da Release I e Release II Definir as equipes/squads Definir os canais de comunicação (Comunicação rápida/informes, dúvidas, decisões, tarefas) Definir dias/horários/locais de disponibilidades dos instrutores Definir dias/horários/locais dos treinamentos Compartilhar os repositórios de projetos passados Garantir que todos os participantes tem todos acessos necessários (repositório, lista de e-mails, Discord, etc) Garantir que todos os participantes tenham os contatos dos instrutores Segue um checklist para ajudar na organização da primeira etapa do onboarding para o professor/mentor. Apresentar o ciclo de vida de projetos de software Apresentar práticas de gestão de equipes ágeis - Scrum Apresentar práticas de documentação ágil - issues, templates de issues, comunicação de issues Apresentar o conceito de timebox e exercitar em atividades síncronas Organizar um evento para que os clientes possam apresentar os problemas a serem resolvidos com software Segue um checklist para ajudar na organização da primeira etapa do onboarding para os instrutores. Compartilhar o contato Segue um checklist para as equipes. Acompanhamento + feedback contínuo A medição da produtividade das equipes de software é uma tarefa complexa e desafiadora. Em primeiro lugar, a própria noção de produtividade pode ser subjetiva e variar de pessoa para pessoa. Mesmo quando se estabelecem parâmetros de referência e métricas, a percepção da produtividade por um engenheiro de software pode ser diferente daquela de um executivo ou membro do conselho. No desenvolvimento de software, a produtividade não se resume apenas ao volume de código escrito ou à ausência de erros. Existem muitos outros fatores que podem influenciar a produtividade da equipe, como a qualidade do código, a eficiência do processo de desenvolvimento, a colaboração entre membros da equipe, o uso de ferramentas e tecnologias apropriadas, entre outros. Portanto, para medir adequadamente a produtividade de uma equipe de software, é essencial ter uma compreensão abrangente e holística do processo de desenvolvimento, bem como das necessidades e objetivos da empresa. Além disso, é importante ter uma abordagem flexível e adaptável, que possa se ajustar às mudanças nas prioridades e demandas do projeto. Somente assim será possível obter uma visão precisa e útil da produtividade da equipe. É verdade que métricas como Deployment Frequency, Cycle Time, Pull Request Throughput, Code Activity e Lead Time podem ser úteis para medir a produtividade das equipes de software. No entanto, é importante lembrar que essas métricas não são a única forma de medir a produtividade e podem não ser suficientes por si só. Existem muitos outros fatores que podem afetar a produtividade da equipe de software, como a qualidade do código, a eficiência da comunicação e colaboração entre os membros da equipe, a utilização de boas práticas de desenvolvimento de software, a adoção de tecnologias e ferramentas modernas, entre outros. Compreender o trabalho invisível e o impacto que ele tem na produtividade da equipe é crucial para o sucesso de um projeto de software. Quando esse trabalho é ignorado ou subestimado, pode haver uma lacuna significativa entre as expectativas das partes interessadas e a realidade do trabalho da equipe de desenvolvimento. Isso pode levar a problemas de comunicação e compreensão, resultando em frustração, mal-entendidos e atrasos no projeto. Além disso, a falta de reconhecimento e valorização do trabalho invisível pode levar à rotatividade de colaboradores, pois a equipe pode sentir-se desmotivada e subestimada. Cabe à liderança da empresa reconhecer e valorizar o trabalho invisível realizado pela equipe de software, comunicar de forma clara e transparente com as partes interessadas do negócio e garantir que haja um entendimento mútuo das expectativas e dos objetivos do projeto. Isso pode ser alcançado através de uma comunicação frequente e efetiva entre a equipe de desenvolvimento de software e as partes interessadas, bem como pelo estabelecimento de um ambiente de trabalho colaborativo e inclusivo. Ao reconhecer e valorizar o trabalho invisível e promover uma cultura de comunicação aberta e transparente, a liderança pode ajudar a minimizar a lacuna entre as expectativas das partes interessadas e a realidade do trabalho da equipe de software, promovendo um ambiente de trabalho mais saudável e produtivo e impulsionando o crescimento do negócio. A maturidade no desenvolvimento de software é um conceito que se refere à capacidade da equipe de software de entregar um produto de alta qualidade, confiável e seguro de maneira consistente e previsível. Isso implica ter processos de desenvolvimento de software bem definidos, testes automatizados e uma cultura de qualidade e melhoria contínua. Por outro lado, a produtividade no desenvolvimento de software se concentra no ritmo e eficiência do trabalho da equipe, medindo a capacidade de produzir resultados de maneira rápida e eficaz. Isso inclui métricas como a quantidade de trabalho concluído em um determinado período de tempo, a rapidez com que as alterações de código são implementadas e a frequência com que o software é distribuído para o usuário final. Equipes de alto desempenho em desenvolvimento de software devem reconhecer a importância de investir tempo em apoiar outras atividades que são vitais para o sucesso do projeto, mesmo que não envolvam diretamente alterações de código ou mudanças visíveis aos usuários. Essas atividades podem incluir a melhoria contínua dos processos de desenvolvimento, Alguns exemplos podem incluir: Acompanhamento e avaliação de métricas de qualidade e desempenho do software; Análise de dados e feedback dos usuários para orientar a tomada de decisões de desenvolvimento; Realização de testes de integração e testes automatizados; Gerenciamento de configuração de software e controle de versão; Participação em treinamentos e desenvolvimento profissional; Colaboração com outras equipes ou departamentos da empresa, como equipes de operações, marketing e vendas, para garantir a integração efetiva do software no ambiente de negócios. https://caroli.org/medir-a-produtividade-em-equipes-de-software-vai-alem-de-olhar-apenas-o-volume-de-codigo-produzido-voce-precisa-do-coeficiente-de-produtividade/ Práticas The labs on the other hand, consisted of sprint activities such as planning, demo and retrospectives Sessões Teóricas Durante o curso, os alunos participaram de aulas teóricas, palestras e painéis de discussão sobre tópicos como: habilidades críticas de engenharia de software, regras não ditas para iniciar sua carreira, coordenação e comunicação, gestão do conhecimento, cultura e confiança. Nos painéis, eles tem a oportunidade de compartilhar suas experiências de trabalho no projeto e aprender com os painelistas da indústria. Além disso, os alunos são desafiados a escrever reflexões em postagens de blog, conectando os tópicos com suas experiências e projetos. Por exemplo, eles poderiam escrever sobre como a coordenação e a comunicação foram importantes para o sucesso do projeto de programação de cursos. Essas atividades ajudaram os alunos a refletir sobre suas habilidades e conhecimentos e a aplicá-los no contexto do projeto. Entregáveis + avaliação Checklist Segue um checklist para ajudar na organização do evento de recepção: Definir dos dias/horários/local dos encontros semanais Apresentar a visão geral do processo de onboarding Apresentar as listas de Entregáveis para a Release I e Release II Definir as datas da Release I e Release II Definir as equipes/squads Definir os canais de comunicação (Comunicação rápida/informes, dúvidas, decisões, tarefas) Definir dias/horários/locais de disponibilidades dos instrutores Definir dias/horários/locais dos treinamentos Compartilhar os repositórios de projetos passados Garantir que todos os participantes tem todos acessos necessários (repositório, lista de e-mails, Discord, etc) Garantir que todos os participantes tenham os contatos dos instrutores Segue um checklist para ajudar na organização da primeira etapa do onboarding para o professor/mentor. Apresentar o ciclo de vida de projetos de software Apresentar práticas de gestão de equipes ágeis - Scrum Apresentar práticas de documentação ágil - issues, templates de issues, comunicação de issues Apresentar o conceito de timebox e exercitar em atividades síncronas Organizar um evento para que os clientes possam apresentar os problemas a serem resolvidos com software Segue um checklist para ajudar na organização da primeira etapa do onboarding para os instrutores. Parte III - Melhoria Contínua Retrospectiva e pontos de melhoria Checklist Segue um checklist para ajudar na organização do evento de recepção: Definir dos dias/horários/local dos encontros semanais Apresentar a visão geral do processo de onboarding Apresentar as listas de Entregáveis para a Release I e Release II Definir as datas da Release I e Release II Definir as equipes/squads Definir os canais de comunicação (Comunicação rápida/informes, dúvidas, decisões, tarefas) Definir dias/horários/locais de disponibilidades dos instrutores Definir dias/horários/locais dos treinamentos Compartilhar os repositórios de projetos passados Garantir que todos os participantes tem todos acessos necessários (repositório, lista de e-mails, Discord, etc) Garantir que todos os participantes tenham os contatos dos instrutores Segue um checklist para ajudar na organização da primeira etapa do onboarding para o professor/mentor. Apresentar o ciclo de vida de projetos de software Apresentar práticas de gestão de equipes ágeis - Scrum Apresentar práticas de documentação ágil - issues, templates de issues, comunicação de issues Apresentar o conceito de timebox e exercitar em atividades síncronas Organizar um evento para que os clientes possam apresentar os problemas a serem resolvidos com software Segue um checklist para ajudar na organização da primeira etapa do onboarding para os instrutores."
  },"/Onboarding/jekyll/2023-02-23-Conceitos.html": {
    "title": "Parte I - Desenvolvimento de Software Ágil",
    "keywords": "Jekyll",
    "url": "/Onboarding/jekyll/2023-02-23-Conceitos.html",
    "body": "Introdução Esse capítulo é dedicado à instrutores, professores, gestores que tem interesse em Métodos Ágeis Manifesto ágil Em fevereiro de 2001, nos Estados Unidos, 17 desenvolvedores de software iniciaram um movimento que se tornaria a base para a criação dos frameworks e métodos ágeis. Insatisfeitos com os resultados obtidos na adoção das metodologias existentes, o grupo criou uma declaração de valores e princípios que representam uma maneira melhor de desenvolver software. O Manifesto é composto por um conjunto de quatro valores e doze princípios que representam a essência do Ágil e devem guiar as opções e alternativas relativas a práticas, papéis, cerimônias, métodos ou frameworks. Os quatro valores do Manifesto Ágil são: Indivíduos e interações mais que processos e ferramentas; Software em funcionamento mais que documentação abrangente; Colaboração com o cliente mais que negociação de contratos; Responder a mudanças mais que seguir um plano. Os doze princípios do Manifesto Ágil são: Nossa maior prioridade é satisfazer o cliente por meio da entrega contínua e adiantada de software com valor agregado. Mudanças nos requisitos são bem-vindas, mesmo tardiamente no desenvolvimento. Processos ágeis tiram vantagem das mudanças visando vantagem competitiva para o cliente. Entregar frequentemente um software funcionando, num prazo de poucas semanas a poucos meses, com preferência à menor escala de tempo. Pessoas de negócio e desenvolvedores devem trabalhar diariamente em conjunto por todo o projeto. Construa projetos em torno de indivíduos motivados. Dê a eles o ambiente e o suporte necessário e confie neles para fazer o trabalho. O método mais eficiente e eficaz de transmitir informações para e entre uma equipe de desenvolvimento é por meio de conversa face a face. Software funcionando é a medida primária de progresso. Os processos ágeis promovem desenvolvimento sustentável. Os patrocinadores, desenvolvedores e usuários devem ser capazes de manter um ritmo constante indefinidamente. Contínua atenção à excelência técnica e bom design aumenta a agilidade. Simplicidade – a arte de maximizar a quantidade de trabalho não realizado – é essencial. As melhores arquiteturas, requisitos e designs emergem de equipes auto-organizáveis. Em intervalos regulares, a equipe reflete sobre como se tornar mais eficaz e então refina e ajusta seu comportamento de acordo. As pessoas que assinaram o Manifesto Ágil em 2001 foram um grupo de desenvolvedores de software que estavam insatisfeitos com as metodologias existentes e buscavam uma maneira melhor de desenvolver software. Eles se reuniram para criar uma declaração de valores e princípios que representassem uma abordagem mais eficiente e eficaz para o desenvolvimento de software. Esses desenvolvedores não criaram um novo método específico, mas sim um conjunto de princípios e valores que poderiam ser aplicados em diferentes métodos e práticas de desenvolvimento de software. O objetivo era promover uma cultura de colaboração, flexibilidade, adaptabilidade e entrega contínua de valor para o cliente. A partir do Manifesto Ágil, foram desenvolvidos diversos frameworks e métodos ágeis, como Scrum, XP (Extreme Programming), Kanban, entre outros, que buscam implementar esses valores e princípios em práticas específicas de desenvolvimento de software. O Manifesto Ágil é um marco importante na história do desenvolvimento de software e continua a ser uma influência significativa na maneira como projetos de software são gerenciados e executados atualmente. Metodologias Ágeis No que diz respeito às Pessoas, as metodologias ágeis enfatizam a importância do relacionamento entre as pessoas e buscam melhorar esse relacionamento por meio de práticas como retrospectivas, liderança servil e design centrado no usuário. O objetivo é criar um ambiente colaborativo e produtivo em que as pessoas possam se comunicar de forma clara e trabalhar juntas para alcançar os objetivos do projeto. Em relação ao Processo, as metodologias ágeis trazem melhorias na forma como as equipes trabalham e nos processos que elas seguem. Esses processos são mais eficientes, com métricas que permitem visibilidade e ferramentas que possibilitam a melhoria contínua. Os processos são mais leves do que os métodos tradicionais, o que os torna mais flexíveis e adaptáveis às mudanças. No que se refere ao Produto, as metodologias ágeis buscam a eficácia na criação, evolução e operação dos produtos. O objetivo é criar produtos de alta qualidade que atendam às necessidades dos usuários. Finalmente, um conceito chave das metodologias ágeis é o Time-Box. O conceito de time-boxing é uma das práticas-chave das metodologias ágeis. Time-boxing significa definir um tempo limite para a realização de uma atividade, reunião ou ciclo de desenvolvimento. Por exemplo, as sprints do Scrum são time-boxes para o desenvolvimento de software, com um período definido de 1 a 4 semanas para concluir uma série de tarefas. A prática de time-boxing ajuda a criar um senso de urgência e foco na equipe, além de garantir que as atividades sejam concluídas dentro de um período definido. Isso também ajuda a evitar o desperdício de tempo e recursos, uma vez que a equipe sabe que tem um prazo limitado para concluir uma determinada atividade. Scrum - Produtividade da Equipe O Scrum é um framework ágil de gestão de projetos que visa entregar valor de forma iterativa e incremental. Ele se baseia em um processo iterativo e incremental que permite à equipe de desenvolvimento se adaptar rapidamente a mudanças, aumentando assim a eficácia da equipe. Foi proposto pelo Jeff Sutherland, e o guia completo do Scrum é constantemente atualizado e disponibilizado em português aqui. Objetivo Princípios Práticas Extreme Programming (XP) - Produtividade do Código O prim Valores Princípios Praticas Spotify - Escalando Times Ágeis Outros Produtividade da Equipe Reuniões: por que elas existem? As reuniões existem para atender à necessidade humana de comunicação e colaboração. Elas são utilizadas para compartilhar informações importantes, alinhar objetivos e tomar decisões. No entanto, as reuniões devem ser bem organizadas e estruturadas para que sejam eficazes. É importante ressaltar que a comunicação não é apenas uma questão de informação, mas também de relacionamentos interpessoais. As reuniões permitem que os membros da equipe interajam e se conheçam melhor, o que pode aumentar a coesão e a colaboração. Embora algumas pessoas possam questionar a necessidade de reuniões e preferir métodos de comunicação mais informais, é importante lembrar que as reuniões são uma oportunidade para envolver toda a equipe e obter feedback de todas as partes interessadas. Além disso, as reuniões podem ajudar a minimizar conflitos e garantir que todas as informações sejam compreendidas corretamente. Por fim, é importante destacar que a pessoa que lidera a reunião desempenha um papel fundamental no sucesso da mesma. É essencial que a pessoa Tech Lead seja capaz de manter a reunião focada, garantir que todos os membros da equipe tenham a oportunidade de falar e incentivar a participação ativa de todos os envolvidos. Em resumo, as reuniões são uma ferramenta valiosa para a comunicação e colaboração em ambientes de trabalho, mas devem ser bem organizadas e estruturadas para serem eficazes. A pessoa Tech Lead tem um papel fundamental no sucesso da reunião, e a comunicação é importante não apenas para transmitir informações, mas também para construir relacionamentos interpessoais e aumentar a coesão da equipe. Papel do Scrum Master/Teach Lead na reunião? As reuniões são sustentadas por quatro pilares fundamentais que guiam todas as ações e atitudes do Scrum Master. Esses pilares são: guiar as pessoas, criar conexões, observar e intervir e consenso ou consentimento. Guiar as pessoas envolve criar um ambiente seguro e confortável para que os participantes possam expressar suas opiniões. Criar conexões é essencial para que todos se sintam ouvidos e suas opiniões conectadas, gerando confiança entre o grupo. A pessoa Tech Lead deve ter uma escuta ativa e estar atenta para perceber se o grupo está caminhando rumo ao objetivo do encontro. Observar e intervir é a base para estimular a eficiência do processo, permitindo que a pessoa Tech Lead identifique elementos que possam prejudicar a eficácia do encontro e saiba como agir em relação a eles. E, finalmente, o consenso ou consentimento é fundamental para garantir que o grupo possa tomar decisões equilibradas, identificando a melhor abordagem para a tomada de decisão e evitando que o processo se torne custoso para a organização. Ao seguir esses quatro pilares, a pessoa Tech Lead pode conduzir reuniões e encontros de forma mais eficaz, garantindo que todos os participantes possam contribuir e que as decisões tomadas sejam equilibradas e bem-sucedidas. Os erros e acertos são oportunidades excelentes para aprender e evoluir na habilidade de facilitação. É importante lembrar que essa é uma habilidade que requer prática e aperfeiçoamento contínuos. Nós, autores, estamos nessa jornada junto com você. Para ajudá-lo a evitar alguns dos erros comuns na facilitação, gostaríamos de compartilhar alguns dos erros communs já observados na disciplina: tentar resolver todos os problemas em uma única reunião, falta de energia da pessoa facilitadora ou do grupo, e não alinhar o contexto e objetivo da reunião. Para mais detalhes sobre cada um desses erros, você pode consultar nosso livro A Arte da Facilitação. A importância de reconhecer e aprender com nossos erros e acertos é fundamental para a evolução profissional. Devemos estar abertos a cometer erros e aprender com eles, pois nenhuma jornada é construída apenas com sucessos. Problemas que podem ocorrer nas reuniões As reuniões podem ser altamente produtivas e eficazes, mas também estão sujeitas a uma série de disfunções que podem prejudicar seu propósito e resultados. Algumas das disfunções comuns incluem bate-boca e confronto, falta de tempo disponível, voltar à estaca zero e lidar com um grande número de pessoas e suas contribuições. No entanto, existem estratégias que as pessoas Tech Leads podem usar para minimizar essas disfunções e maximizar a eficácia da reunião. Em caso de bate-boca e confronto, é recomendado fazer uma pausa estratégica ou até mesmo cancelar a reunião para evitar conflitos desnecessários e manter o objetivo da reunião. Para lidar com a falta de tempo disponível, a estratégia de timeboxing é uma boa opção, permitindo que os participantes se concentrem em tópicos prioritários e evitem discussões irrelevantes. Quando um grupo volta à estaca zero, pode ser útil criar um glossário com definições importantes para o entendimento geral do grupo e revisar periodicamente essas definições para manter a progressão do grupo. Ao lidar com um grande número de pessoas, a pessoa Tech Lead deve buscar o consentimento do grupo para garantir uma tomada de decisão equilibrada e evitar uma decisão catastrófica. Com essas estratégias em mente, a pessoa Tech Lead pode garantir uma reunião produtiva e eficaz para todos os participantes. Checklist para Tech Lead em reuniões Visibilidade do tempo de duração Não seja o centro das atenções Dê oportunidade de fala para todos Defina um tomador de decisão Identifique o efeito pipoca durante a reunião Dê espaço para o silêncio Faça acordos prévios Intervalos regulares Produtividade de Software Dica O principal foco do Onboarding é guiar os membros em um processo de auto aprendizado além da mentoria/liderança serem crucial para o compartilhamento de práticas e cultura"
  },"/Onboarding/jekyll/2023-02-21-OnboardingExperiencial.html": {
    "title": "Metodologia proposta",
    "keywords": "Jekyll",
    "url": "/Onboarding/jekyll/2023-02-21-OnboardingExperiencial.html",
    "body": "Ciclo de vida de projeto de software + processo de onboarding + aprendizagem orientada a experiencia + Comunidades de Software Livre Cada etapa do processo de onboarding tem seus próprios objetivos, que incluem: Boas-vindas: criar um ambiente acolhedor e encorajador para o novo colaborador. Introdução: ajudar o novo colaborador a entender a cultura da empresa e se familiarizar com o ambiente de trabalho. Treinamento: capacitar o novo colaborador para desempenhar suas funções. Acompanhamento: oferecer suporte e orientação ao novo colaborador para garantir uma transição tranquila. Ideia Principal O principal foco do Onboarding é guiar os membros em um processo de auto aprendizado além da mentoria/liderança serem crucial para o compartilhamento de práticas e cultura organizacionais"
  },"/Onboarding/jekyll/2023-02-21-Intro.html": {
    "title": "Processo de Onboarding - Princípios básicos",
    "keywords": "Jekyll",
    "url": "/Onboarding/jekyll/2023-02-21-Intro.html",
    "body": "Onboarding refere-se ao processo que surge ao incorporar novos desenvolvedores em uma equipe de desenvolvimento de software. Em uma Linha de Produtos de Software, o onboarding de novos desenvolvedores pode ser ainda mais complexo, pois essas equipes trabalham em sistemas complexos e altamente personalizáveis. Além disso, os novos desenvolvedores precisam entender os diferentes componentes e variantes da linha de produtos, bem como as práticas e convenções de desenvolvimento específicas da equipe. Esse processo pode levar várias semanas ou até meses, o que pode ter um impacto significativo na produtividade da equipe e na qualidade do software produzido. Para lidar com esses desafios, as equipes de desenvolvimento de software podem utilizar diferentes estratégias de onboarding, como a criação de um programa de treinamento formal, a documentação detalhada do código e do processo de desenvolvimento, e a utilização de ferramentas de suporte ao desenvolvimento colaborativo, como wikis e sistemas de controle de versão. Além disso, as equipes podem contar com a ajuda de mentorias, onde os desenvolvedores mais experientes trabalham em estreita colaboração com os novos membros da equipe para ajudá-los a se adaptarem ao novo ambiente de trabalho. Os recém-chegados (newcomers) enfrentam diferentes tipos de barreiras quando são incorporados a um novo projeto de desenvolvimento de software, a saber: barreiras pessoais, que incluem a relutância dos recém-chegados em pedir ajuda a seus colegas no início de seus processos de resolução de problemas por medo de perder tempo barreiras interpessoais, que, por exemplo, referem-se a problemas de comunicação que surgem quando os recém-chegados são incorporados a uma equipe diversificada, onde pessoas diferentes com objetivos diferentes, culturas diferentes e habilidades interpessoais diferentes se reúnem barreiras de processo, onde os recém-chegados encontram dificuldades em ter uma perspectiva holística do software para o qual estão contribuindo e em descobrir por onde começar a trabalhar barreiras técnicas, os recém-chegados frequentemente encontram problemas devido à alta complexidade dos sistemas que estão sendo desenvolvidos [14], [3]. Este problema é acompanhado pela falta de conhecimento prévio do domínio onde ocorre o desenvolvimento Além disso, essas barreiras também podem levar a um aumento no tempo e no custo do projeto, pois a incorporação de novos desenvolvedores pode atrasar a conclusão de tarefas importantes [3]. Além disso, a qualidade do software desenvolvido pode ser comprometida, pois os recém-chegados podem cometer erros ou não seguir as melhores práticas estabelecidas [14]. Para superar essas barreiras, é necessário implementar estratégias eficazes de onboarding que abordem cada uma das áreas mencionadas acima. Isso pode incluir o uso de ferramentas e tecnologias que facilitem a comunicação e a colaboração entre os membros da equipe, a criação de um ambiente de trabalho acolhedor e inclusivo que incentive os recém-chegados a pedir ajuda e a compartilhar conhecimento, e a implementação de treinamentos e orientações adequados que permitam que os recém-chegados compreendam melhor o processo de desenvolvimento e os sistemas em que estão trabalhando. Para que o processo de onboarding seja eficaz, é importante que a empresa tenha uma cultura de integração, processos bem definidos e ferramentas adequadas para apoiar a atividade. A cultura de integração é criada a partir do momento em que a empresa valoriza e investe no processo de integração. Os processos bem definidos são aqueles que estabelecem o que deve ser feito em cada etapa do onboarding. As ferramentas incluem desde sistemas de gestão de aprendizagem até manuais e guias que ajudam os novos colaboradores a se orientarem na empresa. O processo de onboarding pode variar de acordo com a empresa, mas geralmente envolve as seguintes etapas: Boas-vindas: Nesta etapa, o novo colaborador é recebido pela equipe e apresentado à empresa, incluindo a missão, visão e valores. Introdução: O novo colaborador recebe informações sobre a cultura e os processos da empresa, além de conhecer os colegas de trabalho. Treinamento: O novo colaborador recebe o treinamento necessário para desempenhar suas funções. Acompanhamento: Durante as primeiras semanas, é importante que o novo colaborador receba um acompanhamento para esclarecer dúvidas e orientá-lo sobre as expectativas da empresa. Cada etapa do processo de onboarding tem seus próprios objetivos, que incluem: Boas-vindas: criar um ambiente acolhedor e encorajador para o novo colaborador. Introdução: ajudar o novo colaborador a entender a cultura da empresa e se familiarizar com o ambiente de trabalho. Treinamento: capacitar o novo colaborador para desempenhar suas funções. Acompanhamento: oferecer suporte e orientação ao novo colaborador para garantir uma transição tranquila. Ideia Principal O principal foco do Onboarding é guiar os membros em um processo de auto aprendizado além da mentoria/liderança serem crucial para o compartilhamento de práticas e cultura organizacionais"
  },"/Onboarding/jekyll/2023-02-20-Metodos-de-Desenvolvimento-de-Software.html": {
    "title": "Aprendizado orientado à Experiência - Princípios básicos",
    "keywords": "Jekyll",
    "url": "/Onboarding/jekyll/2023-02-20-Metodos-de-Desenvolvimento-de-Software.html",
    "body": "Aprendizagem orientada a experiência e aprendizagem orientada a projetos são abordagens de ensino cada vez mais utilizadas na área de engenharia de software e métodos ágeis. Essas abordagens colocam o estudante no centro do processo de aprendizagem, permitindo que ele vivencie situações reais e desafiadoras de desenvolvimento de software. Quando combinadas com o desenvolvimento de um projeto open source e padrões de comunidades open source, essas abordagens oferecem ainda mais benefícios para a formação dos estudantes. A aprendizagem orientada a experiência permite que os participantes aprendam de forma significativa e duradoura. Em vez de apenas receber informações teóricas, eles são colocados em situações reais de aprendizado, em que podem aplicar os conceitos teóricos aprendidos e vivenciar na prática os desafios enfrentados na área de engenharia de software. O modelo de referência importante para a construção de um curso eficaz é o modelo de aprendizagem experiencial de David Kolb (Figura 1). Esse modelo sugere que os alunos precisam passar por uma “jornada de descoberta”, onde eles sentem que ganharam a compreensão da lição por meio do processo experiencial de chegar lá. O ciclo de Kolb é composto de quatro etapas principais: Experiência concreta: é a fase inicial, onde os participantes são expostos a uma experiência real e concreta, no nosso caso, um projeto de Software. Observação reflexiva: após a experiência, os participantes são incentivados a refletir sobre o que aconteceu, a analisar as causas e consequências e a identificar padrões e tendências. Conceitualização abstrata: com base nas observações e reflexões, os participantes são convidados a formular conceitos, teorias e hipóteses que expliquem o que aconteceu e que possam ser aplicados em outras situações. Experimentação ativa: por fim, os alunos são encorajados a aplicar os conceitos e teorias formulados em novas experiências, para verificar sua validade e eficácia. Esse ciclo de aprendizagem se repete continuamente, permitindo que os alunos ampliem e aprofundem seus conhecimentos e habilidades ao longo do tempo. Para que esse modelo seja efetivo, é importante que os educadores ofereçam um ambiente seguro e estimulante para as experiências, promovam a reflexão e a discussão das observações, incentivem a formulação de conceitos e teorias e apoiem os alunos em sua experimentação ativa. Um dos elementos-chave do modelo de aprendizagem experiencial é que ele requer um certo nível de autodescoberta e aprendizagem autônoma. A metodologia aqui apresentada é estruturada em quatro etapas. A primeira etapa, de luta, é quando os alunos são desafiados a experimentar algo novo, a se envolver em uma tarefa ou projeto que esteja fora de sua zona de conforto. Nessa fase, o objetivo é criar um senso de urgência e motivação nos alunos, incentivando-os a se engajar ativamente no processo de aprendizagem. A segunda etapa, de estruturar, envolve ajudar os alunos a organizar suas observações e reflexões, a fim de extrair significado e compreensão a partir de suas experiências. Isso pode ser feito por meio de discussões em grupo, anotações individuais, mind maps ou outras ferramentas que ajudem os alunos a organizar suas ideias. A terceira etapa, de sistematizar, é quando os alunos começam a aplicar conceitos e teorias para dar sentido às suas observações e reflexões. Essa etapa envolve a construção de conexões entre a experiência e o conhecimento adquirido, ajudando os alunos a formular ideias mais amplas e abstratas. Por fim, a quarta etapa, de sintetizar, é quando os alunos consolidam suas aprendizagens, integrando seus novos conhecimentos e habilidades em suas vidas cotidianas. Nessa etapa, é importante incentivar os alunos a refletir sobre o que aprenderam e como podem aplicar suas novas habilidades em sua vida profissional ou pessoal. Para apoiar essas quatro etapas, uso uma variedade de métodos de ensino digital, como fóruns de discussão online e plataformas de colaboração. Cada método é escolhido com base nas necessidades específicas de cada etapa do processo de aprendizagem, ajudando os alunos a se engajar ativamente e a criar um ambiente de aprendizagem colaborativa e significativa. Já a aprendizagem orientada a projetos desafia os estudantes a resolver problemas reais, por meio da criação de projetos significativos e desafiadores. Ao criar projetos, os estudantes são capazes de aplicar as habilidades e conhecimentos adquiridos em situações práticas, trabalhar em equipe, desenvolver habilidades de gerenciamento de projetos e aprimorar a capacidade de comunicação, que são habilidades essenciais na área de engenharia de software. Ao combinar a aprendizagem orientada a experiência e a aprendizagem orientada a projetos com o desenvolvimento de um projeto open source, os estudantes podem trabalhar em um projeto real, com uma comunidade de desenvolvedores que oferece suporte e feedback constante. Eles podem contribuir com código, documentação, testes e outras atividades relacionadas ao desenvolvimento de software, o que proporciona um ambiente de aprendizado ainda mais realista e desafiador. Ideia Principal O principal foco da metodologia apresentada é criar a “jornada de descoberta”, para que o aluno tenha aprendizagem autônoma, além de práticas e cultura alinhadas com demandas do mercado"
  }}
