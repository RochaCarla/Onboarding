{"/Onboarding/pages/about/": {
    "title": "Sobre a autora",
    "keywords": "Jekyll",
    "url": "/Onboarding/pages/about/",
    "body": "Carla Rocha (carlarocha.org) é professora de Engenharia de Software na Universidade de Brasília. Desde 2015 aprimora práticas para ensino baseados em experiência, no qual os participantes desenvolvem e/ou contribuem para projetos de Software Livre. Durante as semanas que os participantes desenvolvem os projetos, são paresentados em encontros síncrono o conteúdo teórico que os participantes já estão tendo experiência. Essa metodologia já foi aplicada em diversas disciplinas, e em programas de mentoria e residência TIC. No programa de mentoria Big Open Source Siblings - BOSS (https://github.com/BOSS-BigOpenSourceSister/BigSister), a metodologia foi premiada pelo GNOME Community Engagement Challenge (https://www.gnome.org/challenge/). De 150 projetos, o programa BOSS foi premiado em primeiro Lugar https://www.gnome.org/challenge/winners/. É uma das coordenadoras do Laboratório Avançado de Pesquisa, Produção e Inovação de Software (LAPPIS), no qual coordena/coordenou diversos projetos em colaboração com a Iniciativa privada e Pública, no desenvolvimento de soluções de softwares inovadores. Mais de 60 bolsistas já colaboraram no laboratório sob minha coordenação desde 2017. A metodologia apresentada também é aplicada no laboratório, e a maior parte dos projetos envolvidos resultam em projetos de software livre. Dentre os temas de pesquisa, destaca DevOps (adoção e estrutura de times), métodos ágeis, Produtos de Mahcine Learning e ensino. Mais informações sobre a autora (projetos atuais, pesquisa atual) podem ser encontradas no site carlarocha.org. Contato: caguiar@unb.br"
  },"/Onboarding/pages/contact/": {
    "title": "Público-alvo do livro",
    "keywords": "Jekyll",
    "url": "/Onboarding/pages/contact/",
    "body": "Se você escolheu este livro porque é uma pessoa interessada em trabalhar com equipes multidisciplinares, auto didatas, produtivas e inovadoras. Se você anão sabe por onde começar para promover esse modelo de aprendizado/trabalho, você está no lugar certo. Se você deseja se tornar um engenheiro de Software que domine tanto as habilidades técnicas quanto as habilidades não técnicas exigidas pelo mercado, espero que este livro forneça algumas dicas úteis. Este livro se concentra mais na estruturação execução do processo de Onboarding como método de ensino, e usa como estudo de caso o ensino práticos de métodos ágeis no desenvolvimento de projetos de software livre. Como cada vez menos empresas podem se dar ao luxo de investir meses em Onboarding, o foco é apresentar uma metodologia que pode acelerar e sistematizar o onboarding de empresas, e permitir que intrutores, educadores e estudantes universitários possam se beneficiar desse modelo de ensino-aprendizado. Este livro foi escrito tendo em mente dois grupos principais: Professores, intrutores e gestores que desejam utilizar práticas de onboarding para engajar e otimizar o aprendizado baseado em experiência. Estudantes de Engenharia de Software, ciência da computação, engenharia da Produção e outros alunos universitários que queiram aprender sobre as metodologias ágeis na prática. Imagino que a maioria dos leitores deste livro saiba desenvolver projetos. A segunda parte do livro, onde estão as perguntas, é bastante técnica do contexto de desenvolvimento de projetos de software. No entanto, como os métodos ágeis encontra seu uso em mais setores o campo precisa de mais pessoas com interesses diversos. Se você está interessado em métodos ágeis e desenvolvimento de software, mas hesita em segui-lo porque não possui um diploma de engenharia, eu o encorajo fortemente a explorá-lo. Este livro, especialmente a primeira parte, pode atender a algumas de suas necessidades."
  },"/Onboarding/pages/estrutura/": {
    "title": "Estrutura do Livro",
    "keywords": "Jekyll",
    "url": "/Onboarding/pages/estrutura/",
    "body": "Apresentação Título - Liderando Práticas Onboarding - Como acelerar o aprendizado e disseminar cultura de inovação ágil A visão ingênua sobre o desenvolvimento de software ágil é a que todo mundo chega e comça a escrever o código sem gastar tempo inicial descobrindo o que fazer. Essa visão, apesar de tão errônia quanto simplista, é baseada numa mudança genuína de pensamento. Antes do surgimento do agile, a “Neste livro, você vai encontrar a experiência” O que você encontrará aqui Como surgiu o livro que você tem em mãos Inicialmente, é importante discutir os elementos que, em minha opinião, são fundamentais para compor a estrutura de um curso eficiente, independentemente de ser presencial ou online. Acredito que a aprendizagem dos alunos é mais significativa quando eles experimentam as seguintes condições: Ativa participação: os estudantes são incentivados a participar ativamente das atividades, discussões e projetos propostos pelo curso, o que os torna protagonistas do processo de aprendizagem; Responsabilidade pela própria aprendizagem: é fundamental que os alunos sejam encorajados a assumir a responsabilidade por seu próprio aprendizado, o que os estimula a buscar o conhecimento e a resolver problemas de forma autônoma; Controle significativo sobre a experiência: os alunos devem ter um papel ativo na construção de sua própria experiência de aprendizagem, podendo escolher entre diferentes abordagens e metodologias, de acordo com suas necessidades e interesses. Essas condições são essenciais para que os alunos se sintam motivados e engajados, desenvolvam habilidades e competências relevantes e, consequentemente, alcancem melhores resultados em seu processo de aprendizagem. Para alcançar esses objetivos, é fundamental que nós, como educadores, atuemos como facilitadores da aprendizagem, orientando a experiência de forma cuidadosa e respeitando a autonomia dos alunos. Nesse sentido, é importante adotar uma postura mais flexível e adaptativa, permitindo que os estudantes tenham a liberdade de explorar, experimentar e descobrir, com o apoio e a supervisão necessários. Desse modo, poderemos oferecer um ensino mais personalizado, que atenda às necessidades individuais dos alunos e promova o desenvolvimento de habilidades e competências relevantes para o seu futuro. Essa metodologia já foi aplicada com sucesso em diversas disciplinas, bem como em programas de mentoria e residência TIC. Um exemplo bem-sucedido é o programa de mentoria Big Open Source Siblings - BOSS (https://github.com/BOSS-BigOpenSourceSister/BigSister), cuja metodologia foi premiada pelo GNOME Community Engagement Challenge (https://www.gnome.org/challenge/). Em um concurso que contou com a participação de 150 projetos, o BOSS conquistou o primeiro lugar, comprovando a eficácia da metodologia na promoção de uma aprendizagem significativa e colaborativa. Além disso, a metodologia já foi experiênciada por mais de 500 alunos de graduação do curso de Engenharia de Software da Universidade de Brasília (https://github.com/fga-eps-mds). Esses resultados evidenciam a importância de uma abordagem mais personalizada e flexível na educação, que valorize o protagonismo dos alunos e sua participação ativa na construção do conhecimento. Além disso, mostram que é possível inovar e reinventar práticas pedagógicas, por meio do uso criativo de tecnologias e metodologias de ensino. Processo de Onboarding - Princípios básicos Definição de processo de onboarding O processo de onboarding é uma estratégia de integração que tem como objetivo facilitar a adaptação de novos colaboradores em uma empresa. Esse processo envolve uma série de atividades que ajudam os novos contratados a compreenderem a cultura da organização, conhecerem seus colegas de trabalho, entenderem seus papéis e responsabilidades e receberem o treinamento necessário para desempenharem suas funções. Cultura, processos, ferramentas Para que o processo de onboarding seja eficaz, é importante que a empresa tenha uma cultura de integração, processos bem definidos e ferramentas adequadas para apoiar a atividade. A cultura de integração é criada a partir do momento em que a empresa valoriza e investe no processo de integração. Os processos bem definidos são aqueles que estabelecem o que deve ser feito em cada etapa do onboarding. As ferramentas incluem desde sistemas de gestão de aprendizagem até manuais e guias que ajudam os novos colaboradores a se orientarem na empresa. Aprendizado orientado à Experiência - Princípios básicos Principios basicos Etapas Project-based learning Ferramentas Básicas Comunicação - canal unificado e acolhedor Comunidades abertas - software livre, colaborativos etc Desenvolvimento de Software Ágil Parte I - Planejamento Introdução Esse capítulo é dedicado à instrutores, professores, gestores que tem interesse em Conceitos, práticas, cultura O prim Entregáveis esperados Roadmap do Onboard Parte II - Execução Introdução Esse capítulo é dedicado aos participantes do processo do processo de onboarding com o objetivo de aprender sobre Métodos de Desenvolvimento de Software, mais especificamente aprender os conceitos e práticas relacionados aos métodos ágeis. É a concretização do planejamento realizado na etapa anterior. Recepção + Orientações gerais Acompanhamento + feedback contínuo Sessões Teóricas Entregáveis + avaliação Parte III - Melhoria Contínua Retrospectiva e pontos de melhoria"
  },"/Onboarding/jekyll/2023-02-24-Execucao.html": {
    "title": "Parte II - Execução",
    "keywords": "Jekyll",
    "url": "/Onboarding/jekyll/2023-02-24-Execucao.html",
    "body": "Visão Geral Uma estratégia eficaz de aprendizagem deve integrar conceitos teóricos com sua aplicação prática, seguindo o princípio de “aprender fazendo”. Sem prática, não há aprendizado significativo. Portanto, o processo de ensino-aprendizagem deve incluir duas etapas fundamentais: sessões de assimilação de conceitos teóricos e sessões de prática. Embora o uso de casos acadêmicos possa ser útil, ele pode fornecer uma perspectiva limitada e estreita sobre o problema. Por isso, é fundamental preparar os alunos para a realidade do mercado de trabalho, especialmente em setores como desenvolvimento de software, que estão passando por mudanças significativas com a adoção da cultura DevOps. A integração da teoria com a prática permite que os alunos desenvolvam habilidades práticas e estejam prontos para enfrentar desafios reais em suas carreiras. Esse capítulo é dedicado aos participantes do processo do processo de onboarding com o objetivo de aprender sobre Métodos de Desenvolvimento de Software, mais especificamente aprender os conceitos e práticas relacionados aos métodos ágeis. É a concretização do planejamento realizado na etapa anterior. Recepção + Orientações gerais A primeira etapa da metodologia envolve ciclos de introdução às informações gerais necessárias para iniciar o projeto, formação das equipes, definição de papéis, escolha de ferramentas e práticas para acolher os participantes. A duração dessa etapa pode variar dependendo da frequência dos encontros. Por exemplo, se houver dois encontros semanais, a primeira etapa pode durar até duas semanas. Já se houver apenas um encontro semanal, a primeira etapa pode durar até um mês. Objetivo Acolher novos colaboradores, e apresentar informações sobre a cultura e os processos, além de conhecer os colegas de trabalho. Propomos sessões práticas focadas no desenvolvimento de projetos Open Source, onde os alunos têm a oportunidade de desenvolver o código-fonte, planejar e automatizar o pipeline de implantação, adotando práticas, ferramentas e orientação da comunidade OSS, conforme descrito na Tabela I. É interessante destacar que essa abordagem de deixar os alunos lutarem e procurarem informações por conta própria faz parte do modelo de aprendizagem experiencial de David Kolb, que valoriza a autodescoberta e a aprendizagem autônoma como elementos-chave para o processo de aprendizagem. Além disso, ao apresentar os entregáveis esperados em macro atividades, permite-se que os alunos tenham liberdade para definir seus próprios caminhos e desenvolver suas habilidades não técnicas, o que pode ser extremamente valioso para sua formação como desenvolvedores. Nessa etapa são desenvolvidas várias habilidades não técnicas, como comunicação efetiva, auto aprendizagem, gestão de horas, gestão de conflitos, agir mesmo com pouca informação. Esse setup é bastante próximo de início de projetos no mercado. Papéis do Aluno Tech lead, Estrategista de produto, Desenvolvedores, Arquiteto de Software, Engenheiro de DevOps Funções não estudantis (partes interessadas) Professor, instrutor, cliente (opcional), profissionais de mercado, ex-alunos Releases 2 Releases (Viabilidade Técnica e Prova de Conceito final) Ponto de Partida Ideia fornecida aos alunos por qualquer parte interessada Horários de trabalho da equipe Toda a equipe se reúne 5-8 horas por semana Reuniões Equipa de estudantes reúne semanalmente com stakeholders Gestão de Projetos do dia-a-dia Gerenciada pela equipe de estudantes Práticas de Desenvolvimento Definido por equipe de alunos (Scrum, XP, lean, entre outros) Tecnologias de Desenvolvimento Selecionada pela equipe de alunos Testes cobertura de teste de unidade obrigatória de 90%; Teste de integração também são obrigatórios Conjunto de ferramentas DevOps Selecionado pela equipe de alunos Pipeline Necessário para a implementação: conteinerização, integração contínua, análise de código estático, conformidade com folhas de estilo, automação de teste, pipeline de implantação automatizada e um modo de ramificação de controle de origem Padrões OSS Padrões da comunidade OSS devem ser adotados Papéis Cada aluno desempenha um papel único em uma equipe DevOps, que se assemelha a uma equipe de produto, com a responsabilidade coletiva de “Você construiu, você executa”. As funções, suas responsabilidades e entregas são as seguintes: Scrum Master/Tech Leader: Responsável pela execução de conceitos e práticas de gerenciamento de projetos. Entregáveis esperados incluem documentação de processo, métricas de produtividade e análise e avaliação contínuas da maturidade das práticas ágeis da equipe. Estrategista de Produto: Responsável pela execução de conceitos e práticas de gestão de produto. Essa função deve descrever as personas do usuário, como o produto se encaixa no mercado atual e como atingirá as metas de negócios. Entregáveis esperados incluem planos de produtos, roteiro, plano de negócios, testes de usabilidade e identidade visual do produto. Arquiteto de Software: Responsável pela execução de conceitos e práticas de gerenciamento de produtos e categorias de processo de construção. Essa função lida com o aplicativo e seu fluxo de dados definindo estruturas, ferramentas e tecnologias. Entregáveis esperados incluem definição e documentação de arquitetura, seleção de linguagem de programação, uso de serviços externos (Open Source), reutilização de funcionalidades e integração de serviços e definição de critérios de qualidade. Engenheiro de Release/DevOps: Responsável pela execução de conceitos e práticas das categorias de integração contínua, automação de implantação e monitoramento e registro. Essa função define os estágios do pipeline de implantação, as ferramentas de automação, configura esse pipeline nos ambientes de preparação e produção. Entregáveis esperados incluem documentação, implementação de estágios de pipeline, automação de implantação contínua e testes automatizados. Monitorar o ambiente de produção é opcional. Equipe de Desenvolvimento: Implementa o backlog do produto em funcionalidade potencialmente entregável seguindo tecnologias estabelecidas e critérios de qualidade. Entregáveis esperados incluem o código-fonte do projeto, testes de unidade, comunicação via problemas e execução de práticas de software de código aberto. Professor: Auxilia no gerenciamento de riscos, apresenta conceitos teóricos relacionados ao DevOps e facilita a comunicação com outras partes interessadas. Instrutor: Auxilia a equipe com treinamento e feedback sobre ferramentas, tecnologias e melhores práticas no desenvolvimento de produtos de software de código aberto. Eles ajudam na cultura de colaboração e compartilham suas lições aprendidas. É dada aos alunos total autonomia para auto-organização, para que pudessem experimentar trabalhar em um ambiente similar a empresas. Os alunos recebem total autonomia para decidir como querem organizar suas equipes. A maioria dos alunos se destaca com a autonomia total e elogiou o aspecto de autoaprendizagem do curso. Como um aluno explicou: “A diferença crucial neste curso que o destaca de todas as outras ofertas de cursos na universidade é a imensa mudança em direção à autoaprendizagem e independência de uma equipe de ensino/apoio. A quantidade de trabalho necessária rapidamente aumentou de um sprint para o próximo - o que significou que eu precisava explorar novas abordagens para aprender e, mais importante, colaborar com os outros”. Tópicos/Temas de projetos Os temas do projeto são apresentados no primeiro dia e sugeridos por praticantes, ex-alunos e potenciais clientes, dando às equipes autonomia para escolher o escopo do projeto, a stack tecnologica, a arquitetura de software e as ferramentas de automação. Com o objetivo de simular a experiência de múltiplas equipes da indústria, o projeto deste ano envolveu a concepção e implementação de um software de agendamento de cursos universitários para o departamento de Engenharia de Software e Ciência da Computação da nossa universidade, utilizando práticas Scrum. Apesar de parecer um projeto simples, considerou-se que ambos os departamentos não possuíam atualmente um programa de agendamento de cursos. Hence, the requirements for this project included allowing users to As restrições do projeto são importantes para limitar o escopo do projeto, estabelecer os critérios e checklist de avaliação, orientar o planejamento, execução e priorização das tarefas. Elas também ajudam os instrutores a avaliar continuamente os riscos do projeto e dar feedback constante às equipes, de acordo com os limites definidos pelas restrições. A comunidade OSS tem uma série de padrões recomendados com foco na construção de comunidades acolhedoras. Essas práticas visam manter normas, qualidade de código, padrões técnicos, comunicação, disseminação de conhecimento, conscientização da equipe, compartilhamento de propriedade e dar boas-vindas continuamente aos novos membros. Não abordamos neste trabalho os critérios detalhados de avaliação dos alunos. Baseados fortemente nas comunidades e padrões OSS, definimos um conjunto de restrições de projeto para orientar a tomada de decisão dos alunos: Ambientes: cada equipe deve ter ambientes de teste e produção disponíveis; Padrões OSS: os padrões da comunidade OSS devem ser adotados. Padronização e problemas de modelo, modelo de branch de controle de origem, documentação do projeto, pipeline de implantação, comunicação de problemas e feedback em Pull Requests são exemplos de padrão OSS; Ciclos de entrega: existem dois lançamentos oficiais significativos no curso, nos quais as equipes apresentam suas soluções a um conselho de avaliação. Regenerate response Práticas Obrigatórias Entregáveis Embora o foco principal do curso fosse o desenvolvimento do projeto para avaliar o resultado da aprendizagem, foram estabelecidos alguns outros entregáveis ao longo do período. A lista de entregáveis inclui: Documento de especificação de requisitos (Roadmap, StoryMap) Planejamento, demonstração e retrospectiva para cada sprint Revisão por pares para cada sprint Logbook para cada sprint 4 postagens de blog reflexivas baseadas em leituras obrigatórias Documentação do projeto de acordo com padrões de Software Livre e relatório final (Release notes) Apresentação final O logbook, ou diário de bordo, é uma ferramenta utilizada para cada aluno registrar as atividades realizadas pelos durante cada sprint, bem como o número de horas dedicadas a cada uma delas. Essa prática permite uma melhor gestão do tempo e das atividades, além de facilitar o monitoramento do progresso individual de cada estudante. Na última semana, cada equipe é solicitada a apresentar uma demonstração ao vivo da solução para o cliente e realizar uma apresentação final. Além disso, cada equipe escreve um relatório final contendo todas as decisões de projeto, suposições e resultados obtidos. Timeline do projeto A metodologia apresentada pode ser aplicada em vários timelines. Acompanhamento + feedback contínuo Práticas The labs on the other hand, consisted of sprint activities such as planning, demo and retrospectives Sessões Teóricas Durante o curso, os alunos participaram de aulas teóricas, palestras e painéis de discussão sobre tópicos como: habilidades críticas de engenharia de software, regras não ditas para iniciar sua carreira, coordenação e comunicação, gestão do conhecimento, cultura e confiança. Nos painéis, eles tem a oportunidade de compartilhar suas experiências de trabalho no projeto e aprender com os painelistas da indústria. Além disso, os alunos são desafiados a escrever reflexões em postagens de blog, conectando os tópicos com suas experiências e projetos. Por exemplo, eles poderiam escrever sobre como a coordenação e a comunicação foram importantes para o sucesso do projeto de programação de cursos. Essas atividades ajudaram os alunos a refletir sobre suas habilidades e conhecimentos e a aplicá-los no contexto do projeto. Entregáveis + avaliação Parte III - Melhoria Contínua Retrospectiva e pontos de melhoria"
  },"/Onboarding/jekyll/2023-02-23-Conceitos.html": {
    "title": "Conceitos, práticas, cultura",
    "keywords": "Jekyll",
    "url": "/Onboarding/jekyll/2023-02-23-Conceitos.html",
    "body": "Dica O principal foco do Onboarding é guiar os membros em um processo de auto aprendizado além da mentoria/liderança serem crucial para o compartilhamento de práticas e cultura"
  },"/Onboarding/jekyll/2023-02-21-Ferramentas.html": {
    "title": "Ferramentas",
    "keywords": "Jekyll",
    "url": "/Onboarding/jekyll/2023-02-21-Ferramentas.html",
    "body": "Comunicação - canal unificado e acolhedor Comunidades abertas - software livre, colaborativos etc Dica O principal foco do Onboarding é guiar os membros em um processo de auto aprendizado além da mentoria/liderança serem crucial para o compartilhamento de práticas e cultura"
  },"/Onboarding/jekyll/2023-02-21-Intro.html": {
    "title": "Processo de Onboarding - Princípios básicos",
    "keywords": "Jekyll",
    "url": "/Onboarding/jekyll/2023-02-21-Intro.html",
    "body": "Onboarding refere-se ao processo que surge ao incorporar novos desenvolvedores em uma equipe de desenvolvimento de software. Em uma Linha de Produtos de Software, o onboarding de novos desenvolvedores pode ser ainda mais complexo, pois essas equipes trabalham em sistemas complexos e altamente personalizáveis. Além disso, os novos desenvolvedores precisam entender os diferentes componentes e variantes da linha de produtos, bem como as práticas e convenções de desenvolvimento específicas da equipe. Esse processo pode levar várias semanas ou até meses, o que pode ter um impacto significativo na produtividade da equipe e na qualidade do software produzido. Para lidar com esses desafios, as equipes de desenvolvimento de software podem utilizar diferentes estratégias de onboarding, como a criação de um programa de treinamento formal, a documentação detalhada do código e do processo de desenvolvimento, e a utilização de ferramentas de suporte ao desenvolvimento colaborativo, como wikis e sistemas de controle de versão. Além disso, as equipes podem contar com a ajuda de mentorias, onde os desenvolvedores mais experientes trabalham em estreita colaboração com os novos membros da equipe para ajudá-los a se adaptarem ao novo ambiente de trabalho. Os recém-chegados (newcomers) enfrentam diferentes tipos de barreiras quando são incorporados a um novo projeto de desenvolvimento de software, a saber: barreiras pessoais, que incluem a relutância dos recém-chegados em pedir ajuda a seus colegas no início de seus processos de resolução de problemas por medo de perder tempo barreiras interpessoais, que, por exemplo, referem-se a problemas de comunicação que surgem quando os recém-chegados são incorporados a uma equipe diversificada, onde pessoas diferentes com objetivos diferentes, culturas diferentes e habilidades interpessoais diferentes se reúnem barreiras de processo, onde os recém-chegados encontram dificuldades em ter uma perspectiva holística do software para o qual estão contribuindo e em descobrir por onde começar a trabalhar barreiras técnicas, os recém-chegados frequentemente encontram problemas devido à alta complexidade dos sistemas que estão sendo desenvolvidos [14], [3]. Este problema é acompanhado pela falta de conhecimento prévio do domínio onde ocorre o desenvolvimento Além disso, essas barreiras também podem levar a um aumento no tempo e no custo do projeto, pois a incorporação de novos desenvolvedores pode atrasar a conclusão de tarefas importantes [3]. Além disso, a qualidade do software desenvolvido pode ser comprometida, pois os recém-chegados podem cometer erros ou não seguir as melhores práticas estabelecidas [14]. Para superar essas barreiras, é necessário implementar estratégias eficazes de onboarding que abordem cada uma das áreas mencionadas acima. Isso pode incluir o uso de ferramentas e tecnologias que facilitem a comunicação e a colaboração entre os membros da equipe, a criação de um ambiente de trabalho acolhedor e inclusivo que incentive os recém-chegados a pedir ajuda e a compartilhar conhecimento, e a implementação de treinamentos e orientações adequados que permitam que os recém-chegados compreendam melhor o processo de desenvolvimento e os sistemas em que estão trabalhando. Para que o processo de onboarding seja eficaz, é importante que a empresa tenha uma cultura de integração, processos bem definidos e ferramentas adequadas para apoiar a atividade. A cultura de integração é criada a partir do momento em que a empresa valoriza e investe no processo de integração. Os processos bem definidos são aqueles que estabelecem o que deve ser feito em cada etapa do onboarding. As ferramentas incluem desde sistemas de gestão de aprendizagem até manuais e guias que ajudam os novos colaboradores a se orientarem na empresa. O processo de onboarding pode variar de acordo com a empresa, mas geralmente envolve as seguintes etapas: Boas-vindas: Nesta etapa, o novo colaborador é recebido pela equipe e apresentado à empresa, incluindo a missão, visão e valores. Introdução: O novo colaborador recebe informações sobre a cultura e os processos da empresa, além de conhecer os colegas de trabalho. Treinamento: O novo colaborador recebe o treinamento necessário para desempenhar suas funções. Acompanhamento: Durante as primeiras semanas, é importante que o novo colaborador receba um acompanhamento para esclarecer dúvidas e orientá-lo sobre as expectativas da empresa. Cada etapa do processo de onboarding tem seus próprios objetivos, que incluem: Boas-vindas: criar um ambiente acolhedor e encorajador para o novo colaborador. Introdução: ajudar o novo colaborador a entender a cultura da empresa e se familiarizar com o ambiente de trabalho. Treinamento: capacitar o novo colaborador para desempenhar suas funções. Acompanhamento: oferecer suporte e orientação ao novo colaborador para garantir uma transição tranquila. Ideia Principal O principal foco do Onboarding é guiar os membros em um processo de auto aprendizado além da mentoria/liderança serem crucial para o compartilhamento de práticas e cultura organizacionais"
  },"/Onboarding/jekyll/2023-02-20-Metodos-de-Desenvolvimento-de-Software.html": {
    "title": "Aprendizado orientado à Experiência - Princípios básicos",
    "keywords": "Jekyll",
    "url": "/Onboarding/jekyll/2023-02-20-Metodos-de-Desenvolvimento-de-Software.html",
    "body": "Aprendizagem orientada a experiência e aprendizagem orientada a projetos são abordagens de ensino cada vez mais utilizadas na área de engenharia de software e métodos ágeis. Essas abordagens colocam o estudante no centro do processo de aprendizagem, permitindo que ele vivencie situações reais e desafiadoras de desenvolvimento de software. Quando combinadas com o desenvolvimento de um projeto open source e padrões de comunidades open source, essas abordagens oferecem ainda mais benefícios para a formação dos estudantes. A aprendizagem orientada a experiência permite que os participantes aprendam de forma significativa e duradoura. Em vez de apenas receber informações teóricas, eles são colocados em situações reais de aprendizado, em que podem aplicar os conceitos teóricos aprendidos e vivenciar na prática os desafios enfrentados na área de engenharia de software. O modelo de referência importante para a construção de um curso eficaz é o modelo de aprendizagem experiencial de David Kolb (Figura 1). Esse modelo sugere que os alunos precisam passar por uma “jornada de descoberta”, onde eles sentem que ganharam a compreensão da lição por meio do processo experiencial de chegar lá. O ciclo de Kolb é composto de quatro etapas principais: Experiência concreta: é a fase inicial, onde os participantes são expostos a uma experiência real e concreta, no nosso caso, um projeto de Software. Observação reflexiva: após a experiência, os participantes são incentivados a refletir sobre o que aconteceu, a analisar as causas e consequências e a identificar padrões e tendências. Conceitualização abstrata: com base nas observações e reflexões, os participantes são convidados a formular conceitos, teorias e hipóteses que expliquem o que aconteceu e que possam ser aplicados em outras situações. Experimentação ativa: por fim, os alunos são encorajados a aplicar os conceitos e teorias formulados em novas experiências, para verificar sua validade e eficácia. Esse ciclo de aprendizagem se repete continuamente, permitindo que os alunos ampliem e aprofundem seus conhecimentos e habilidades ao longo do tempo. Para que esse modelo seja efetivo, é importante que os educadores ofereçam um ambiente seguro e estimulante para as experiências, promovam a reflexão e a discussão das observações, incentivem a formulação de conceitos e teorias e apoiem os alunos em sua experimentação ativa. Um dos elementos-chave do modelo de aprendizagem experiencial é que ele requer um certo nível de autodescoberta e aprendizagem autônoma. A metodologia aqui apresentada é estruturada em quatro etapas. A primeira etapa, de luta, é quando os alunos são desafiados a experimentar algo novo, a se envolver em uma tarefa ou projeto que esteja fora de sua zona de conforto. Nessa fase, o objetivo é criar um senso de urgência e motivação nos alunos, incentivando-os a se engajar ativamente no processo de aprendizagem. A segunda etapa, de estruturar, envolve ajudar os alunos a organizar suas observações e reflexões, a fim de extrair significado e compreensão a partir de suas experiências. Isso pode ser feito por meio de discussões em grupo, anotações individuais, mind maps ou outras ferramentas que ajudem os alunos a organizar suas ideias. A terceira etapa, de sistematizar, é quando os alunos começam a aplicar conceitos e teorias para dar sentido às suas observações e reflexões. Essa etapa envolve a construção de conexões entre a experiência e o conhecimento adquirido, ajudando os alunos a formular ideias mais amplas e abstratas. Por fim, a quarta etapa, de sintetizar, é quando os alunos consolidam suas aprendizagens, integrando seus novos conhecimentos e habilidades em suas vidas cotidianas. Nessa etapa, é importante incentivar os alunos a refletir sobre o que aprenderam e como podem aplicar suas novas habilidades em sua vida profissional ou pessoal. Para apoiar essas quatro etapas, uso uma variedade de métodos de ensino digital, como fóruns de discussão online e plataformas de colaboração. Cada método é escolhido com base nas necessidades específicas de cada etapa do processo de aprendizagem, ajudando os alunos a se engajar ativamente e a criar um ambiente de aprendizagem colaborativa e significativa. Já a aprendizagem orientada a projetos desafia os estudantes a resolver problemas reais, por meio da criação de projetos significativos e desafiadores. Ao criar projetos, os estudantes são capazes de aplicar as habilidades e conhecimentos adquiridos em situações práticas, trabalhar em equipe, desenvolver habilidades de gerenciamento de projetos e aprimorar a capacidade de comunicação, que são habilidades essenciais na área de engenharia de software. Ao combinar a aprendizagem orientada a experiência e a aprendizagem orientada a projetos com o desenvolvimento de um projeto open source, os estudantes podem trabalhar em um projeto real, com uma comunidade de desenvolvedores que oferece suporte e feedback constante. Eles podem contribuir com código, documentação, testes e outras atividades relacionadas ao desenvolvimento de software, o que proporciona um ambiente de aprendizado ainda mais realista e desafiador. Ideia Principal O principal foco da metodologia apresentada é criar a “jornada de descoberta”, para que o aluno tenha aprendizagem autônoma, além de práticas e cultura alinhadas com demandas do mercado"
  }}
