<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/Onboarding/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/Onboarding/" rel="alternate" type="text/html" /><updated>2023-03-15T22:01:22-03:00</updated><id>http://localhost:4000/Onboarding/feed.xml</id><title type="html">Disseminando a Cultura de Inovação Ágil</title><subtitle>Livro construido com o Jekyll com o estilo GitBook.
</subtitle><author><name>Carla Rocha</name></author><entry><title type="html">Parte II - Acelerando o Aprendizado</title><link href="http://localhost:4000/Onboarding/jekyll/2023-02-24-Execucao.html" rel="alternate" type="text/html" title="Parte II - Acelerando o Aprendizado" /><published>2023-02-24T00:00:00-03:00</published><updated>2023-02-24T00:00:00-03:00</updated><id>http://localhost:4000/Onboarding/jekyll/Execucao</id><content type="html" xml:base="http://localhost:4000/Onboarding/jekyll/2023-02-24-Execucao.html"><![CDATA[<h2 id="visão-geral">Visão Geral</h2>

<p>Uma estratégia eficaz de aprendizagem deve integrar conceitos teóricos com sua aplicação prática, seguindo o princípio de “aprender fazendo”. Sem prática, não há aprendizado significativo. Portanto, o processo de ensino-aprendizagem deve incluir duas etapas fundamentais: sessões de assimilação de conceitos teóricos e sessões de prática.</p>

<p>Embora o uso de casos acadêmicos possa ser útil, ele pode fornecer uma perspectiva limitada e estreita sobre o problema. Por isso, é fundamental preparar os alunos para a realidade do mercado de trabalho, especialmente em setores como desenvolvimento de software, que estão passando por mudanças significativas com a adoção da cultura DevOps. A integração da teoria com a prática permite que os alunos desenvolvam habilidades práticas e estejam prontos para enfrentar desafios reais em suas carreiras.</p>

<p>Esse capítulo é dedicado aos participantes do processo do processo de onboarding com o objetivo de aprender sobre Métodos de Desenvolvimento de Software, mais especificamente aprender os conceitos e práticas relacionados aos métodos ágeis. É a concretização do planejamento realizado na etapa anterior.</p>

<h2 id="roadmap-do-onboard">Roadmap do Onboard</h2>

<p><img src="../assets/figs/roadmap.png" alt="image" /></p>

<h2 id="recepção--orientações-gerais">Recepção + Orientações gerais</h2>

<p>A primeira etapa da metodologia envolve ciclos de introdução às informações gerais necessárias para iniciar o projeto, formação das equipes, definição de papéis, escolha de ferramentas e práticas para acolher os participantes. A duração dessa etapa pode variar dependendo da frequência dos encontros. Por exemplo, se houver dois encontros semanais, a primeira etapa pode durar até duas semanas. Já se houver apenas um encontro semanal, a primeira etapa pode durar até um mês.</p>

<blockquote class="block-tip">
  <h5 id="objetivo">Objetivo</h5>

  <p>Acolher novos colaboradores, e apresentar informações sobre a cultura e os processos,
 além de conhecer os colegas de trabalho.</p>
</blockquote>

<p>Propomos sessões práticas focadas no desenvolvimento de projetos Open Source, onde os alunos têm a oportunidade de desenvolver o código-fonte, planejar e automatizar o pipeline de implantação, adotando práticas, ferramentas e orientação da comunidade OSS, conforme descrito na Tabela abaixo.</p>

<table>
  <tbody>
    <tr>
      <td>Papéis do Aluno</td>
      <td>Tech lead, Estrategista de produto, Desenvolvedores, Arquiteto de Software, Engenheiro de DevOps</td>
    </tr>
    <tr>
      <td>Funções não estudantis (partes interessadas)</td>
      <td>Professor, instrutor, cliente (opcional), profissionais de mercado, ex-alunos</td>
    </tr>
    <tr>
      <td>Releases</td>
      <td>2 Releases (Viabilidade Técnica e Prova de Conceito final)</td>
    </tr>
    <tr>
      <td>Ponto de Partida</td>
      <td>Ideia fornecida aos alunos por qualquer parte interessada</td>
    </tr>
    <tr>
      <td>Horários de trabalho da equipe</td>
      <td>Toda a equipe se reúne 5-8 horas por semana</td>
    </tr>
    <tr>
      <td>Reuniões</td>
      <td>Equipa de estudantes reúne semanalmente com stakeholders</td>
    </tr>
    <tr>
      <td>Gestão de Projetos do dia-a-dia</td>
      <td>Gerenciada pela equipe de estudantes</td>
    </tr>
    <tr>
      <td>Práticas de Desenvolvimento</td>
      <td>Definido por equipe de alunos (Scrum, XP, lean, entre outros)</td>
    </tr>
    <tr>
      <td>Tecnologias de Desenvolvimento</td>
      <td>Selecionada pela equipe de alunos</td>
    </tr>
    <tr>
      <td>Testes</td>
      <td>cobertura de teste de unidade obrigatória de 90%; Teste de integração também são obrigatórios</td>
    </tr>
    <tr>
      <td>Conjunto de ferramentas DevOps</td>
      <td>Selecionado pela equipe de alunos</td>
    </tr>
    <tr>
      <td>Pipeline</td>
      <td>Necessário para a implementação: conteinerização, integração contínua, análise de código estático, conformidade com folhas de estilo, automação de teste, pipeline de implantação automatizada e um modo de ramificação de controle de origem</td>
    </tr>
    <tr>
      <td>Padrões OSS</td>
      <td>Padrões da comunidade OSS devem ser adotados</td>
    </tr>
  </tbody>
</table>

<p>É interessante destacar que essa abordagem de deixar os alunos lutarem e procurarem informações por conta própria faz parte do modelo de aprendizagem experiencial de David Kolb, que valoriza a autodescoberta e a aprendizagem autônoma como elementos-chave para o processo de aprendizagem. O curso não fornece um plano detalhado para a entrega final do projeto, o que se assemelha aos projetos de software reais. Essa decisão central é deixada para as equipes, o que lhes permite exercitar suas habilidades de gestão e decisão, além de incentivar a colaboração com outras equipes, mentores e professores. Isso inclui a definição de processos, conjunto de ferramentas, pipeline de entrega, automação, ambiente de execução, monitoramento, atribuição de tarefas, entregas, treinamento da equipe, entre outros aspectos. Aprender com base na experiência é mais importante e benéfico do que uma abordagem puramente teórica, pois evidencia como os conceitos técnicos e não técnicos estão interconectados e ambos impactam a entrega final. Vários alunos relataram a dificuldade inicial em tomar decisões e a insegurança de não ter uma lista de tarefas pré-definida. No entanto, eles reconheceram a importância da tomada de decisão para compreender os elementos que impactam a entrega contínua.</p>

<p>Além disso, ao apresentar os entregáveis esperados em macro atividades, permite-se que os alunos tenham liberdade para definir seus próprios caminhos e desenvolver suas habilidades não técnicas, o que pode ser extremamente valioso para sua formação como desenvolvedores. Nessa etapa são desenvolvidas várias habilidades não técnicas, como comunicação efetiva, auto aprendizagem, gestão de horas, gestão des conflitos, agir mesmo com pouca informação. Esse setup é bastante próximo de início de projetos no mercado.</p>

<h3 id="formação-das-equipes">Formação das Equipes</h3>

<p>Cada aluno desempenha um papel único em uma equipe DevOps, que se assemelha a uma equipe de produto, com a responsabilidade coletiva de “Você construiu, você executa”.</p>

<p>5.1 Time multidisciplinar
5.2 Time auto-organizável
5.3 Sentando lado a lado
5.4 As reuniões de retrospectiva e a melhoria contínua</p>

<p>As funções, suas responsabilidades e entregas são as seguintes:</p>

<ul>
  <li><em>Scrum Master/Tech Leader</em>: Responsável pela execução de conceitos e práticas de gerenciamento de projetos. Entregáveis esperados incluem documentação de processo, métricas de produtividade e análise e avaliação contínuas da maturidade das práticas ágeis da equipe.</li>
  <li><em>Estrategista de Produto</em>: Responsável pela execução de conceitos e práticas de gestão de produto. Essa função deve descrever as personas do usuário, como o produto se encaixa no mercado atual e como atingirá as metas de negócios. Entregáveis esperados incluem planos de produtos, roteiro, plano de negócios, testes de usabilidade e identidade visual do produto.</li>
  <li><em>Arquiteto de Software</em>: Responsável pela execução de conceitos e práticas de gerenciamento de produtos e categorias de processo de construção. Essa função lida com o aplicativo e seu fluxo de dados definindo estruturas, ferramentas e tecnologias. Entregáveis esperados incluem definição e documentação de arquitetura, seleção de linguagem de programação, uso de serviços externos (Open Source), reutilização de funcionalidades e integração de serviços e definição de critérios de qualidade.</li>
  <li><em>Engenheiro de Release/DevOps</em>: Responsável pela execução de conceitos e práticas das categorias de integração contínua, automação de implantação e monitoramento e registro. Essa função define os estágios do pipeline de implantação, as ferramentas de automação, configura esse pipeline nos ambientes de preparação e produção. Entregáveis esperados incluem documentação, implementação de estágios de pipeline, automação de implantação contínua e testes automatizados. Monitorar o ambiente de produção é opcional.</li>
  <li><em>Equipe de Desenvolvimento</em>: Implementa o backlog do produto em funcionalidade potencialmente entregável seguindo tecnologias estabelecidas e critérios de qualidade. Entregáveis esperados incluem o código-fonte do projeto, testes de unidade, comunicação via problemas e execução de práticas de software de código aberto.</li>
  <li><em>Professor</em>: Auxilia no gerenciamento de riscos, apresenta conceitos teóricos relacionados ao DevOps e facilita a comunicação com outras partes interessadas.</li>
  <li><em>Instrutor</em>: Auxilia a equipe com treinamento e feedback sobre ferramentas, tecnologias e melhores práticas no desenvolvimento de produtos de software de código aberto. Eles ajudam na cultura de colaboração e compartilham suas lições aprendidas.</li>
</ul>

<p>É dada aos alunos total autonomia para auto-organização, para que pudessem experimentar trabalhar em um ambiente similar a empresas. Os alunos recebem total autonomia para decidir como querem organizar suas equipes. A maioria dos alunos se destaca com a autonomia total e elogiou o aspecto de autoaprendizagem do curso. Como um aluno explicou: <em>“A diferença crucial neste curso que o destaca de todas as outras ofertas de cursos na universidade é a imensa mudança em direção à autoaprendizagem e independência de uma equipe de ensino/apoio. A quantidade de trabalho necessária rapidamente aumentou de um sprint para o próximo - o que significou que eu precisava explorar novas abordagens para aprender e, mais importante, colaborar com os outros”</em>.</p>

<h3 id="tópicostemas-de-projetos">Tópicos/Temas de projetos</h3>

<p>Os temas do projeto são apresentados no primeiro dia e sugeridos por praticantes, ex-alunos e potenciais clientes, dando às equipes autonomia para escolher o escopo do projeto, a stack tecnologica, a arquitetura de software e as ferramentas de automação.</p>

<p>Com o objetivo de simular a experiência de múltiplas equipes da indústria, o projeto deste ano envolveu a concepção e implementação de um software de agendamento de cursos universitários para o departamento de Engenharia de Software e Ciência da Computação da nossa universidade, utilizando práticas Scrum. Apesar de parecer um projeto simples, considerou-se que ambos os departamentos não possuíam atualmente um programa de agendamento de cursos.</p>

<p>As restrições do projeto são importantes para limitar o escopo do projeto, estabelecer os critérios e checklist de avaliação, orientar o planejamento, execução e priorização das tarefas. Elas também ajudam os instrutores a avaliar continuamente os riscos do projeto e dar feedback constante às equipes, de acordo com os limites definidos pelas restrições. A comunidade OSS tem uma série de padrões recomendados com foco na construção de comunidades acolhedoras. Essas práticas visam manter normas, qualidade de código, padrões técnicos, comunicação, disseminação de conhecimento, conscientização da equipe, compartilhamento de propriedade e dar boas-vindas continuamente aos novos membros. Não abordamos neste trabalho os critérios detalhados de avaliação dos alunos. Baseados fortemente nas comunidades e padrões OSS, definimos um conjunto de restrições de projeto para orientar a tomada de decisão dos alunos:</p>

<ul>
  <li>Ambientes: cada equipe deve ter ambientes de teste e produção disponíveis;</li>
  <li>Padrões OSS: os padrões da comunidade OSS devem ser adotados. Padronização e problemas de modelo, modelo de branch de controle de origem, documentação do projeto, pipeline de implantação, comunicação de problemas e feedback em Pull Requests são exemplos de padrão OSS;</li>
  <li>Ciclos de entrega: existem dois lançamentos oficiais significativos no curso, nos quais as equipes apresentam suas soluções a um conselho de avaliação.</li>
</ul>

<h3 id="práticas-de-aprendizagem">Práticas de aprendizagem</h3>

<table>
  <thead>
    <tr>
      <th>Categorias</th>
      <th>Conceitos</th>
      <th>Práticas</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Gestão de Produto (Processo/Pessoas)</td>
      <td>Microservice; Product quality; Customer satisfaction; Small features; Artifact management; Release engineering; Knowledge, Skills, and Capabilities; Programing educations; Quality assurance; and Artifact management.</td>
      <td>OSS Documentation standards; unit test; review; licensing; pair revision and code review; architecture structure; product documentation; and pipeline stage documentation.</td>
    </tr>
    <tr>
      <td>Gestão de Projetos (Processo/Pessoas)</td>
      <td>Gestão de pessoas; Short feedback cycle; Pilots team and lead customer; Compliance regulations; Team experience; Aligning incentives; Breaking down silos; Culture of collaboration; Versioning; Sharing knowledge; Programing educations; Global community knowledge; Failure as opportunity of improvement; ollaborate across departments; Knowledge, skills, and capabilities; and Artifact management.</td>
      <td>Sprint; Kanban; planing; review; Stand-up metting; dojos; Tasks in issues; training; OSS Recommended Standards; Post mortem; code of contributing; Communication in issue and PR; Full-stack and self organized teams; git-flow; pull request; process documentation; badges status in readme; tracking metrics; and pair revision.</td>
    </tr>
    <tr>
      <td>Processo de Build (Entrega)</td>
      <td>Release engineering; Continuous delivery; Automation; Testing automation; Correctness; and Static analysis.</td>
      <td>Deployment pipeline stages; Automation; Unit test; Integration tests; and components tests.</td>
    </tr>
    <tr>
      <td>Integração Contínua (Entrega)</td>
      <td>Frequent and reliable release process; Release engineering; Deployment pipeline; Continuous integration; Automation; and Continuous delivery.</td>
      <td>Build and deploy automated; badges status in readme; and git-flow.</td>
    </tr>
    <tr>
      <td>Deployment Contínua (Entrega/Runtime)</td>
      <td>Frequent and reliable release process; Release engineering; Continuous delivery; Configuration management; Automation; Infrastructure as code; Virtualization; and Containerization.</td>
      <td>Git-flow; Continuous Integration; Build and Deploy automated; Architecture Structure; Documentation; and pipline stage documentation.</td>
    </tr>
    <tr>
      <td>Monitoramento &amp; Logging (Entrega/Runtime)</td>
      <td>You built it, you run it; Availability; After-hours support for Devs; Alerting; Continuous runtime monitoring; Security; Performance; Automation Metrics; Experiments Log management; Reliability; and Scalability Resilience.</td>
      <td>Operation tasks in issues; Logging; Monitoring; and Benchmark.</td>
    </tr>
  </tbody>
</table>

<h3 id="especificar-projetar-trabalhar-tudo-em-par">Especificar, projetar, trabalhar, tudo em par</h3>

<p>Benefícios Programação em par</p>

<p>Nivelando o conhecimento</p>

<p>Pair programming essentially means that two people write code together on one machine. It is a very collaborative way of working and involves a lot of communication. While a pair of developers work on a task together, they do not only write code, they also plan and discuss their work. They clarify ideas on the way, discuss approaches and come to better solutions.</p>

<p>https://martinfowler.com/articles/on-pair-programming.html</p>

<h3 id="entregas">Entregas</h3>

<p>Embora o foco principal do curso fosse o desenvolvimento do projeto para avaliar o resultado da aprendizagem, foram estabelecidos alguns outros entregáveis ao longo do período. A lista de entregáveis inclui:</p>

<ul>
  <li>Documento de especificação de requisitos (Roadmap, StoryMap)</li>
  <li>Planejamento, demonstração e retrospectiva para cada sprint</li>
  <li>Revisão por pares para cada sprint</li>
  <li>Logbook para cada sprint</li>
  <li>4 postagens de blog reflexivas baseadas em leituras obrigatórias</li>
  <li>Documentação do projeto  de acordo com padrões de Software Livre e relatório final (Release notes)</li>
  <li>Apresentação final</li>
</ul>

<p>O logbook, ou diário de bordo, é uma ferramenta utilizada para cada aluno registrar as atividades realizadas pelos durante cada sprint, bem como o número de horas dedicadas a cada uma delas. Essa prática permite uma melhor gestão do tempo e das atividades, além de facilitar o monitoramento do progresso individual de cada estudante.</p>

<p>Na última semana, cada equipe é solicitada a apresentar uma demonstração ao vivo da solução para o cliente e realizar uma apresentação final. Além disso, cada equipe escreve um relatório final contendo todas as decisões de projeto, suposições e resultados obtidos.</p>

<h3 id="timeline-do-projeto">Timeline do projeto</h3>

<p>A metodologia apresentada pode ser aplicada em vários timelines.</p>

<h3 id="comunicação">Comunicação</h3>

<p>Um elemento central das metodologias ágeis é uma comunicação efeitva. Essa mesma comunicação efetiva é adotada por comunidades de software livre. Para isso, as práticas e cultura de comunicação efetiva deve ser estimulado e respeitado desde o primeiro encontro.</p>

<p>Uma comunicação efetiva começa por estabelecer os canais de comuncação e o tipo de comunicação se dar por cada canal. Por exemplo, se há um canal específico de dar informes, ele não deve ser usado para tirar dúvidas ou compartilhar informações relacionados ao projeto. Aqui vão os principais tipos de comunicação adotados por comunicades de software livre e empresas:</p>

<ul>
  <li><em>Issues</em>: qualquer tarefa relacionada ao projeto deve ser documentada como uma issue. Se alguma decisão sobre uma issue é tomada  (por exemplo em um pareamento, reunião), essa decisão deve ser posteriormente documentada na issue. A escrita das issues devem ser padronizadas para facilitar a compreensão de newcomers e acompanhamento do projeto. Por isso para cada tipo de issue (tarefa, User Story, Epico, etc) é necessário um template adequado. A issue é o principal canal de comunicação assincrona da equipe de desenvolvimento.</li>
  <li><em>Canal de comunicação por squad</em>: cada squad/time deve escolher seu próprio canal de comunicação, seja o slack, servidor discord, grupo telegram/whatsapp. Normalmente esses canais servem para comunicações rápidas, coloquiais.</li>
  <li><em>Canal de comunicação geral</em>: gerido pelo professor/gestor, esse canal reune participantes, instrutores, mentores e clientes. Aqui são trocadas mensagens sobre andamento do projeto, informes gerais, alinhamento de datas/artefatos de entrega.</li>
  <li><em>Canal de dúvidas</em>: canal gerido pelos instrutores e squads para tirar dúvidas técnicas, pedido de análise dos artefatos, agendamento de treinamento sob demanada.</li>
  <li><em>Repositório</em>: Toda a documentação técnica para comunicar artefatos de projeto devem ser compoartilhado em um repositório aberto, seguindo os templates, boas práticas e organização de comunidades de software livre.</li>
</ul>

<h3 id="checklist">Checklist</h3>

<p>Segue um checklist para ajudar na organização do evento de recepção:</p>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Definir dos dias/horários/local dos encontros semanais</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Apresentar a visão geral do processo de onboarding</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Apresentar as listas de Entregáveis para a Release I e Release II</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Definir as datas da Release I e Release II</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Definir as equipes/squads</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Definir os canais de comunicação (Comunicação rápida/informes, dúvidas, decisões, tarefas)</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Definir dias/horários/locais de disponibilidades dos instrutores</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Definir dias/horários/locais dos treinamentos</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Compartilhar os repositórios de projetos passados</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Garantir que todos os participantes tem todos acessos necessários (repositório, lista de e-mails, Discord, etc)</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Garantir que todos os participantes tenham os contatos dos instrutores</li>
</ul>

<p>Segue um checklist para ajudar na organização da primeira etapa do onboarding para o professor/mentor.</p>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Apresentar o ciclo de vida de projetos de software</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Apresentar práticas de gestão de equipes ágeis - Scrum</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Apresentar práticas de documentação ágil - issues, templates de issues, comunicação de issues</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Apresentar o conceito de timebox e exercitar em atividades síncronas</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Organizar um evento para que os clientes possam apresentar os problemas a serem resolvidos com software</li>
</ul>

<p>Segue um checklist para ajudar na organização da primeira etapa do onboarding para os instrutores.</p>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Compartilhar o contato</li>
</ul>

<p>Segue um checklist para as equipes.</p>

<h2 id="acompanhamento--feedback-contínuo">Acompanhamento + feedback contínuo</h2>

<p>A medição da produtividade das equipes de software é uma tarefa complexa e desafiadora. Em primeiro lugar, a própria noção de produtividade pode ser subjetiva e variar de pessoa para pessoa. Mesmo quando se estabelecem parâmetros de referência e métricas, a percepção da produtividade por um engenheiro de software pode ser diferente daquela de um executivo ou membro do conselho.</p>

<p>No desenvolvimento de software, a produtividade não se resume apenas ao volume de código escrito ou à ausência de erros. Existem muitos outros fatores que podem influenciar a produtividade da equipe, como a qualidade do código, a eficiência do processo de desenvolvimento, a colaboração entre membros da equipe, o uso de ferramentas e tecnologias apropriadas, entre outros.</p>

<p>Portanto, para medir adequadamente a produtividade de uma equipe de software, é essencial ter uma compreensão abrangente e holística do processo de desenvolvimento, bem como das necessidades e objetivos da empresa. Além disso, é importante ter uma abordagem flexível e adaptável, que possa se ajustar às mudanças nas prioridades e demandas do projeto. Somente assim será possível obter uma visão precisa e útil da produtividade da equipe.</p>

<p>É verdade que métricas como <em>Deployment Frequency</em>, <em>Cycle Time</em>, <em>Pull Request Throughput</em>, <em>Code Activity</em> e <em>Lead Time</em> podem ser úteis para medir a produtividade das equipes de software. No entanto, é importante lembrar que essas métricas não são a única forma de medir a produtividade e podem não ser suficientes por si só.</p>

<p>Existem muitos outros fatores que podem afetar a produtividade da equipe de software, como a qualidade do código, a eficiência da comunicação e colaboração entre os membros da equipe, a utilização de boas práticas de desenvolvimento de software, a adoção de tecnologias e ferramentas modernas, entre outros.</p>

<p>Compreender o trabalho invisível e o impacto que ele tem na produtividade da equipe é crucial para o sucesso de um projeto de software. Quando esse trabalho é ignorado ou subestimado, pode haver uma lacuna significativa entre as expectativas das partes interessadas e a realidade do trabalho da equipe de desenvolvimento.</p>

<p>Isso pode levar a problemas de comunicação e compreensão, resultando em frustração, mal-entendidos e atrasos no projeto. Além disso, a falta de reconhecimento e valorização do trabalho invisível pode levar à rotatividade de colaboradores, pois a equipe pode sentir-se desmotivada e subestimada.</p>

<p>Cabe à liderança da empresa reconhecer e valorizar o trabalho invisível realizado pela equipe de software, comunicar de forma clara e transparente com as partes interessadas do negócio e garantir que haja um entendimento mútuo das expectativas e dos objetivos do projeto. Isso pode ser alcançado através de uma comunicação frequente e efetiva entre a equipe de desenvolvimento de software e as partes interessadas, bem como pelo estabelecimento de um ambiente de trabalho colaborativo e inclusivo.</p>

<p>Ao reconhecer e valorizar o trabalho invisível e promover uma cultura de comunicação aberta e transparente, a liderança pode ajudar a minimizar a lacuna entre as expectativas das partes interessadas e a realidade do trabalho da equipe de software, promovendo um ambiente de trabalho mais saudável e produtivo e impulsionando o crescimento do negócio.</p>

<p>A maturidade no desenvolvimento de software é um conceito que se refere à capacidade da equipe de software de entregar um produto de alta qualidade, confiável e seguro de maneira consistente e previsível. Isso implica ter processos de desenvolvimento de software bem definidos, testes automatizados e uma cultura de qualidade e melhoria contínua.</p>

<p>Por outro lado, a produtividade no desenvolvimento de software se concentra no ritmo e eficiência do trabalho da equipe, medindo a capacidade de produzir resultados de maneira rápida e eficaz. Isso inclui métricas como a quantidade de trabalho concluído em um determinado período de tempo, a rapidez com que as alterações de código são implementadas e a frequência com que o software é distribuído para o usuário final.</p>

<p>Equipes de alto desempenho em desenvolvimento de software devem reconhecer a importância de investir tempo em apoiar outras atividades que são vitais para o sucesso do projeto, mesmo que não envolvam diretamente alterações de código ou mudanças visíveis aos usuários. Essas atividades podem incluir a melhoria contínua dos processos de desenvolvimento,</p>

<p>Alguns exemplos podem incluir:</p>

<ul>
  <li>Acompanhamento e avaliação de métricas de qualidade e desempenho do software;</li>
  <li>Análise de dados e feedback dos usuários para orientar a tomada de decisões de desenvolvimento;</li>
  <li>Realização de testes de integração e testes automatizados;</li>
  <li>Gerenciamento de configuração de software e controle de versão;</li>
  <li>Participação em treinamentos e desenvolvimento profissional;</li>
  <li>Colaboração com outras equipes ou departamentos da empresa, como equipes de operações, marketing e vendas, para garantir a integração efetiva do software no ambiente de negócios.</li>
</ul>

<p>https://caroli.org/medir-a-produtividade-em-equipes-de-software-vai-alem-de-olhar-apenas-o-volume-de-codigo-produzido-voce-precisa-do-coeficiente-de-produtividade/</p>

<h3 id="definindo-o-significado-de-pronto">Definindo o significado de Pronto</h3>

<h2 id="práticas">Práticas</h2>
<p>The labs on the other hand, consisted of sprint activities such as planning, demo and retrospectives</p>

<h2 id="sessões-teóricas">Sessões Teóricas</h2>

<p>Durante o curso, os alunos participaram de aulas teóricas, palestras e painéis de discussão sobre tópicos como: habilidades críticas de engenharia de software, regras não ditas para iniciar sua carreira, coordenação e comunicação, gestão do conhecimento, cultura e confiança. Nos painéis, eles tem a oportunidade de compartilhar suas experiências de trabalho no projeto e aprender com os painelistas da indústria.</p>

<p>Além disso, os alunos são desafiados a escrever reflexões em postagens de blog, conectando os tópicos com suas experiências e projetos. Por exemplo, eles poderiam escrever sobre como a coordenação e a comunicação foram importantes para o sucesso do projeto de programação de cursos. Essas atividades ajudaram os alunos a refletir sobre suas habilidades e conhecimentos e a aplicá-los no contexto do projeto.</p>

<h2 id="entregáveis--avaliação">Entregáveis + avaliação</h2>

<h3 id="checklist-1">Checklist</h3>

<p>Segue um checklist para ajudar na organização do evento de recepção:</p>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Definir dos dias/horários/local dos encontros semanais</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Apresentar a visão geral do processo de onboarding</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Apresentar as listas de Entregáveis para a Release I e Release II</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Definir as datas da Release I e Release II</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Definir as equipes/squads</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Definir os canais de comunicação (Comunicação rápida/informes, dúvidas, decisões, tarefas)</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Definir dias/horários/locais de disponibilidades dos instrutores</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Definir dias/horários/locais dos treinamentos</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Compartilhar os repositórios de projetos passados</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Garantir que todos os participantes tem todos acessos necessários (repositório, lista de e-mails, Discord, etc)</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Garantir que todos os participantes tenham os contatos dos instrutores</li>
</ul>

<p>Segue um checklist para ajudar na organização da primeira etapa do onboarding para o professor/mentor.</p>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Apresentar o ciclo de vida de projetos de software</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Apresentar práticas de gestão de equipes ágeis - Scrum</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Apresentar práticas de documentação ágil - issues, templates de issues, comunicação de issues</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Apresentar o conceito de timebox e exercitar em atividades síncronas</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Organizar um evento para que os clientes possam apresentar os problemas a serem resolvidos com software</li>
</ul>

<p>Segue um checklist para ajudar na organização da primeira etapa do onboarding para os instrutores.</p>

<h1 id="parte-iii---melhoria-contínua">Parte III - Melhoria Contínua</h1>

<h2 id="retrospectiva-e-pontos-de-melhoria">Retrospectiva e pontos de melhoria</h2>

<h3 id="checklist-2">Checklist</h3>

<p>Segue um checklist para ajudar na organização do evento de recepção:</p>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Definir dos dias/horários/local dos encontros semanais</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Apresentar a visão geral do processo de onboarding</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Apresentar as listas de Entregáveis para a Release I e Release II</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Definir as datas da Release I e Release II</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Definir as equipes/squads</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Definir os canais de comunicação (Comunicação rápida/informes, dúvidas, decisões, tarefas)</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Definir dias/horários/locais de disponibilidades dos instrutores</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Definir dias/horários/locais dos treinamentos</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Compartilhar os repositórios de projetos passados</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Garantir que todos os participantes tem todos acessos necessários (repositório, lista de e-mails, Discord, etc)</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Garantir que todos os participantes tenham os contatos dos instrutores</li>
</ul>

<p>Segue um checklist para ajudar na organização da primeira etapa do onboarding para o professor/mentor.</p>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Apresentar o ciclo de vida de projetos de software</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Apresentar práticas de gestão de equipes ágeis - Scrum</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Apresentar práticas de documentação ágil - issues, templates de issues, comunicação de issues</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Apresentar o conceito de timebox e exercitar em atividades síncronas</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Organizar um evento para que os clientes possam apresentar os problemas a serem resolvidos com software</li>
</ul>

<p>Segue um checklist para ajudar na organização da primeira etapa do onboarding para os instrutores.</p>]]></content><author><name>Carla Rocha</name></author><category term="Jekyll" /><summary type="html"><![CDATA[Visão Geral]]></summary></entry><entry><title type="html">Bias em Projetos de Software</title><link href="http://localhost:4000/Onboarding/jekyll/2023-02-23-Bias.html" rel="alternate" type="text/html" title="Bias em Projetos de Software" /><published>2023-02-23T00:00:00-03:00</published><updated>2023-02-23T00:00:00-03:00</updated><id>http://localhost:4000/Onboarding/jekyll/Bias</id><content type="html" xml:base="http://localhost:4000/Onboarding/jekyll/2023-02-23-Bias.html"><![CDATA[<blockquote class="block-tip">
  <h5 id="ideia-principal">Ideia Principal</h5>

  <p>O principal foco da Metodologia Proposta é guiar os membros em um processo de auto aprendizado 
além da mentoria/liderança serem crucial para o compartilhamento de práticas e cultura organizacionais</p>
</blockquote>

<p>A presença feminina em projetos de software de código aberto (OSS) é baixa, o que acarreta prejuízos tanto para a carreira e o desenvolvimento de habilidades das mulheres quanto para os próprios projetos, que sofrem com a falta de diversidade de perspectivas.</p>

<p>TODO</p>]]></content><author><name>Carla Rocha</name></author><category term="Jekyll" /><summary type="html"><![CDATA[Ideia Principal O principal foco da Metodologia Proposta é guiar os membros em um processo de auto aprendizado além da mentoria/liderança serem crucial para o compartilhamento de práticas e cultura organizacionais]]></summary></entry><entry><title type="html">Metodologia Proposta</title><link href="http://localhost:4000/Onboarding/jekyll/2023-02-23-Metodologia.html" rel="alternate" type="text/html" title="Metodologia Proposta" /><published>2023-02-23T00:00:00-03:00</published><updated>2023-02-23T00:00:00-03:00</updated><id>http://localhost:4000/Onboarding/jekyll/Metodologia</id><content type="html" xml:base="http://localhost:4000/Onboarding/jekyll/2023-02-23-Metodologia.html"><![CDATA[<blockquote class="block-tip">
  <h5 id="ideia-principal">Ideia Principal</h5>

  <p>O principal foco da Metodologia Proposta é guiar os membros em um processo de auto aprendizado 
além da mentoria/liderança serem crucial para o compartilhamento de práticas e cultura organizacionais</p>
</blockquote>

<p>A principal ideia por trás da metodologia proposta é utilizar o ciclo de onboarding e os princípios e práticas de aprendizagem baseada em experiência, a fim de aplicá-los em um ciclo de desenvolvimento de software que atenda aos padrões adotados pelas comunidades de software livre.  Essa abordagem não apenas aumenta a eficiência e qualidade do projeto, mas também incentiva o desenvolvimento de habilidades e conhecimentos dos membros da equipe, promovendo um ambiente de trabalho colaborativo e produtivo.</p>

<p>Aprendizagem orientada a experiência e aprendizagem orientada a projetos são abordagens cada vez mais utilizadas na área de engenharia de software e métodos ágeis. Essas abordagens colocam o estudante/participante no centro do processo de aprendizagem, permitindo que ele vivencie situações reais e desafiadoras de desenvolvimento de software. Quando combinadas com o desenvolvimento de um projeto open source e padrões de comunidades open source, essas abordagens oferecem ainda mais benefícios para a formação dos estudantes.</p>

<p>A aprendizagem orientada a projetos desafia os estudantes a resolver problemas reais, por meio da criação de projetos significativos e desafiadores.  Ao criar projetos, os estudantes são capazes de aplicar as habilidades e conhecimentos adquiridos em situações práticas, trabalhar em equipe, desenvolver habilidades de gerenciamento de projetos e aprimorar a capacidade de comunicação, que são habilidades essenciais na área de engenharia de software.</p>

<p>Ao combinar a aprendizagem orientada a experiência e a aprendizagem orientada a projetos com o desenvolvimento de um projeto open source, as equipes podem trabalhar em um projeto real, com uma comunidade de desenvolvedores que oferece suporte e feedback constante. Eles podem contribuir com código, documentação, testes e outras atividades relacionadas ao desenvolvimento de software, o que proporciona um ambiente de aprendizado ainda mais realista e desafiador.</p>

<p><img src="../assets/figs/macroetapas.png" alt="image" /></p>

<p>Cada etapa do processo de onboarding tem seus próprios objetivos, que incluem:</p>

<ul>
  <li>Boas-vindas: criar um ambiente acolhedor e encorajador para o novo colaborador.</li>
  <li>Introdução: ajudar o novo colaborador a entender a cultura da empresa e se familiarizar com o ambiente de trabalho.</li>
  <li>Treinamento: capacitar o novo colaborador para desempenhar suas funções.</li>
  <li>Acompanhamento: oferecer suporte e orientação ao novo colaborador para garantir uma transição tranquila.</li>
</ul>]]></content><author><name>Carla Rocha</name></author><category term="Jekyll" /><summary type="html"><![CDATA[Ideia Principal O principal foco da Metodologia Proposta é guiar os membros em um processo de auto aprendizado além da mentoria/liderança serem crucial para o compartilhamento de práticas e cultura organizacionais]]></summary></entry><entry><title type="html">Parte I - Cultura de Inovação Ágil</title><link href="http://localhost:4000/Onboarding/jekyll/2023-02-23-Conceitos.html" rel="alternate" type="text/html" title="Parte I - Cultura de Inovação Ágil" /><published>2023-02-23T00:00:00-03:00</published><updated>2023-02-23T00:00:00-03:00</updated><id>http://localhost:4000/Onboarding/jekyll/Conceitos</id><content type="html" xml:base="http://localhost:4000/Onboarding/jekyll/2023-02-23-Conceitos.html"><![CDATA[<h1 id="agilidade">Agilidade</h1>

<p>O desenvolvimento ágil é um método adaptativo, ao invés de preditivo, e coloca as pessoas em primeiro lugar, ao invés de focar nos processos. Isso significa que não há uma divisão clara entre as fases e as disciplinas podem, muitas vezes, ser executadas em paralelo. O objetivo principal dos projetos ágeis é entregar um produto de qualidade para o cliente, e no caso de projetos de software, essa entrega envolve a criação de software de qualidade. Esse resultado é alcançado através de um planejamento, projeto e desenvolvimento iterativo e incremental do produto de software, com a participação e validação contínua dos clientes ou patrocinadores da ideia.</p>

<h1 id="pessoas-envolvidas-em-um-projeto-de-software">Pessoas envolvidas em um projeto de software</h1>

<p>Stakeholders são todas as pessoas, grupos ou organizações que têm interesse ou influência no resultado de um projeto de software. Eles podem ser internos, como membros da equipe de desenvolvimento, gerentes de projeto, líderes de equipe, ou externos, como clientes, usuários finais, fornecedores ou parceiros comerciais. Entre os stakeholders comuns em um ciclo de projeto de software, estão:</p>

<ul>
  <li><strong>Testadores</strong>: responsáveis por testar e validar o software para garantir que ele atenda aos requisitos e padrões de qualidade estabelecidos.</li>
  <li><strong>Interaction Designers</strong>: são responsáveis pela criação da interface do usuário, garantindo que a experiência do usuário seja intuitiva, eficiente e agradável</li>
  <li><strong>Arquitetos</strong>: são responsáveis por projetar a arquitetura do sistema, garantindo que ele seja escalável, seguro e fácil de manter.</li>
  <li><strong>Gestor de Projeto</strong>:  são responsáveis por liderar o projeto e garantir que ele seja entregue dentro do prazo, orçamento e escopo estabelecidos</li>
  <li><strong>Gestor de Produto e Executivos</strong>: têm como objetivo liderar a estratégia e o desenvolvimento de produtos para atender às necessidades dos clientes e do negócio</li>
  <li><strong>Escritores técnicos</strong>:  são responsáveis pela criação da documentação do software, incluindo manuais de usuário, guias de instalação e documentos técnicos</li>
  <li><strong>Usuários finais</strong>: são a razão pela qual o software está sendo desenvolvido, e suas necessidades e feedbacks devem ser levados em consideração em todo o processo</li>
  <li><strong>Programadores</strong>: são responsáveis pela codificação e desenvolvimento do software, transformando as ideias em código.</li>
  <li><strong>Recursos Humanos</strong>: responsável por recrutar, contratar e gerenciar a equipe de desenvolvimento de software</li>
</ul>

<p>Nos times ágeis, os papéis e as responsabilidades são substituídos por atribuições, o que significa que o foco é colocado nas tarefas que precisam ser realizadas e não em quem deve fazê-las. Essas atribuições são flexíveis e podem ser desempenhadas por uma ou mais pessoas no time. Também é comum que um único indivíduo assuma várias atribuições para garantir que as necessidades do projeto sejam atendidas de maneira eficiente.</p>

<p>Essa abordagem é uma resposta ao modelo cascata, no qual cada etapa do processo é conduzida por profissionais específicos, definidos pelos seus papéis. Nos times ágeis, há uma maior flexibilidade e colaboração entre os membros da equipe, permitindo que as habilidades individuais sejam utilizadas de forma mais adaptável às necessidades do projeto.</p>

<p>As atribuições em times ágeis são frequentemente mais focadas em entregas específicas, em vez de tarefas individuais, o que ajuda a manter o foco no objetivo geral do projeto e promove uma abordagem mais centrada no cliente. Isso significa que as equipes ágeis estão mais preparadas para lidar com mudanças inesperadas e se adaptar rapidamente, mantendo-se alinhadas com as necessidades do negócio.</p>

<p>Um time tipicamente ágil, temos a necessidade das seguintes atribuições</p>
<ul>
  <li>
    <p><strong>Product Owner</strong> - Embora o termo “Product Owner” tenha sido introduzido pelo Scrum como uma atribuição específica em equipes ágeis, é comum encontrar outras variações de definição e nomenclatura dessa função em diferentes contextos empresariais. Alguns exemplos incluem “Estrategista de Produto” (Product Strategist) e “Gestor de Produto” (Product Manager), que podem ter algumas diferenças em suas responsabilidades e atribuições específicas, mas, em geral, têm como objetivo liderar a estratégia e o desenvolvimento de produtos para atender às necessidades dos clientes e do negócio. Independentemente da nomenclatura, o papel do Product Owner ou suas variações é crucial para o sucesso de projetos ágeis, pois eles são responsáveis por definir as prioridades, tomar decisões e garantir a entrega de valor para o cliente.</p>
  </li>
  <li>
    <p><strong>Scrum Master</strong>:  garantir que o processo Scrum seja seguido corretamente. Ele/ela trabalha para remover quaisquer impedimentos ou obstáculos que possam estar impedindo o time de cumprir seus objetivos, ajudando a equipe a se auto-organizar e colaborar de maneira eficaz. O Scrum Master também é responsável por liderar as cerimônias do Scrum, como a Daily Scrum, a Sprint Review e a Sprint Retrospective, e por promover uma cultura de melhoria contínua.</p>
  </li>
  <li>
    <p><strong>DevOps</strong>: DevOps é uma cultura e prática que tem como objetivo integrar as equipes de desenvolvimento (Dev) e operações (Ops) para acelerar a entrega de software de alta qualidade. Em times ágeis, o DevOps é frequentemente uma função ou atribuição que ajuda a garantir que a entrega de software seja automatizada, segura e rápida. Os DevOps trabalham em conjunto com o time de desenvolvimento para garantir que o software seja entregue rapidamente e com qualidade, automatizando processos de testes, integração, entrega e monitoramento de software.</p>
  </li>
  <li>
    <p><strong>Arquiteto</strong>: é responsável por definir a arquitetura do sistema e garantir que ela atenda às necessidades do negócio e do cliente. Em times ágeis, o arquiteto geralmente é uma função ou atribuição que trabalha em conjunto com o time de desenvolvimento para garantir que a arquitetura seja flexível, escalável e segura. O arquiteto também é responsável por manter a consistência da arquitetura em todo o sistema e garantir que as soluções sejam consistentes e sustentáveis.</p>
  </li>
  <li>
    <p><strong>Desenvolvedor back-end</strong>: é responsável por trabalhar nos servidores, bancos de dados e outros componentes do software que não estão visíveis para o usuário final. Eles são responsáveis por desenvolver a lógica de negócios e a integração com outros sistemas, garantindo que o software funcione corretamente e de forma eficiente.</p>
  </li>
  <li>
    <p><strong>Desenvolvedor Front-end</strong>: é responsável por desenvolver a interface do usuário, ou seja, tudo o que o usuário vê e interage com o software. Eles são responsáveis por garantir que a interface seja amigável, responsiva e intuitiva, trabalhando com designers para garantir uma experiência do usuário de alta qualidade. O desenvolvedor front-end também é responsável por garantir que o software seja compatível com diferentes navegadores e dispositivos.</p>
  </li>
</ul>

<p>4.5 Cleaner
4.6 Tracker
4.7 Gerente
4.8 Outros papéis</p>

<h2 id="manifesto-ágil">Manifesto ágil</h2>

<p>Em fevereiro de 2001, nos Estados Unidos, 17 desenvolvedores de software iniciaram um movimento que se tornaria a base para a criação dos frameworks e métodos ágeis. Insatisfeitos com os resultados obtidos na adoção das metodologias existentes, o grupo criou uma declaração de valores e princípios que representam uma maneira melhor de desenvolver software.</p>

<p>O Manifesto é composto por um conjunto de quatro valores e doze princípios que representam a essência do Ágil e devem guiar as opções e alternativas relativas a práticas, papéis, cerimônias, métodos ou frameworks.</p>

<p>Os quatro valores do Manifesto Ágil são:</p>

<ol>
  <li>Indivíduos e interações mais que processos e ferramentas;</li>
  <li>Software em funcionamento mais que documentação abrangente;</li>
  <li>Colaboração com o cliente mais que negociação de contratos;</li>
  <li>Responder a mudanças mais que seguir um plano.</li>
</ol>

<p>Os doze princípios do Manifesto Ágil são:</p>

<ol>
  <li>Nossa maior prioridade é satisfazer o cliente por meio da entrega contínua e adiantada de software com valor agregado.</li>
  <li>Mudanças nos requisitos são bem-vindas, mesmo tardiamente no desenvolvimento. Processos ágeis tiram vantagem das mudanças visando vantagem competitiva para o cliente.</li>
  <li>Entregar frequentemente um software funcionando, num prazo de poucas semanas a poucos meses, com preferência à menor escala de tempo.</li>
  <li>Pessoas de negócio e desenvolvedores devem trabalhar diariamente em conjunto por todo o projeto.</li>
  <li>Construa projetos em torno de indivíduos motivados. Dê a eles o ambiente e o suporte necessário e confie neles para fazer o trabalho.</li>
  <li>O método mais eficiente e eficaz de transmitir informações para e entre uma equipe de desenvolvimento é por meio de conversa face a face.</li>
  <li>Software funcionando é a medida primária de progresso.</li>
  <li>Os processos ágeis promovem desenvolvimento sustentável. Os patrocinadores, desenvolvedores e usuários devem ser capazes de manter um ritmo constante indefinidamente.</li>
  <li>Contínua atenção à excelência técnica e bom design aumenta a agilidade.</li>
  <li>Simplicidade – a arte de maximizar a quantidade de trabalho não realizado – é essencial.</li>
  <li>As melhores arquiteturas, requisitos e designs emergem de equipes auto-organizáveis.</li>
  <li>Em intervalos regulares, a equipe reflete sobre como se tornar mais eficaz e então refina e ajusta seu comportamento de acordo.</li>
</ol>

<p>As pessoas que assinaram o Manifesto Ágil em 2001 foram um grupo de desenvolvedores de software que estavam insatisfeitos com as metodologias existentes e buscavam uma maneira melhor de desenvolver software. Eles se reuniram para criar uma declaração de valores e princípios que representassem uma abordagem mais eficiente e eficaz para o desenvolvimento de software.</p>

<p>Esses desenvolvedores não criaram um novo método específico, mas sim um conjunto de princípios e valores que poderiam ser aplicados em diferentes métodos e práticas de desenvolvimento de software. O objetivo era promover uma <strong>cultura de colaboração</strong>, <strong>flexibilidade</strong>, <strong>adaptabilidade</strong> e <strong>entrega contínua de valor para o cliente</strong>.</p>

<p>A partir do Manifesto Ágil, foram desenvolvidos diversos frameworks e métodos ágeis, como Scrum, XP (Extreme Programming), Kanban, entre outros, que buscam implementar esses valores e princípios em práticas específicas de desenvolvimento de software. O Manifesto Ágil é um marco importante na história do desenvolvimento de software e continua a ser uma influência significativa na maneira como projetos de software são gerenciados e executados atualmente.</p>

<h2 id="metodologias-ágeis">Metodologias Ágeis</h2>

<p>Valores ou “cultura” são fundamentais em software! No que diz respeito às Pessoas, as metodologias ágeis enfatizam a importância do relacionamento entre as pessoas e buscam melhorar esse relacionamento por meio de práticas como retrospectivas, liderança servil e design centrado no usuário. O objetivo é criar um ambiente colaborativo e produtivo em que as pessoas possam se comunicar de forma clara e trabalhar juntas para alcançar os objetivos do projeto.</p>

<p>Em relação ao Processo, as metodologias ágeis trazem melhorias na forma como as equipes trabalham e nos processos que elas seguem. Esses processos são mais eficientes, com métricas que permitem visibilidade e ferramentas que possibilitam a melhoria contínua. Os processos são mais leves do que os métodos tradicionais, o que os torna mais flexíveis e adaptáveis às mudanças.</p>

<p>No que se refere ao Produto, as metodologias ágeis buscam a eficácia na criação, evolução e operação dos produtos. O objetivo é criar produtos de alta qualidade que atendam às necessidades dos usuários.</p>

<p>Finalmente, um conceito chave das metodologias ágeis é o <em>Time-Box</em>. O conceito de time-boxing é uma das práticas-chave das metodologias ágeis. Time-boxing significa definir um tempo limite para a realização de uma atividade, reunião ou ciclo de desenvolvimento. Por exemplo, as sprints do Scrum são time-boxes para o desenvolvimento de software, com um período definido de 1 a 4 semanas para concluir uma série de tarefas. A prática de time-boxing ajuda a criar um senso de urgência e foco na equipe, além de garantir que as atividades sejam concluídas dentro de um período definido. Isso também ajuda a evitar o desperdício de tempo e recursos, uma vez que a equipe sabe que tem um prazo limitado para concluir uma determinada atividade.</p>

<h3 id="scrum---produtividade-da-equipe">Scrum - Produtividade da Equipe</h3>

<p>O Scrum é um framework ágil que visa a entrega de produtos complexos. Embora tenha sido inicialmente proposto para projetos de desenvolvimento de software, ele pode ser aplicado em qualquer contexto de projetos complexos e inovadores, especialmente aqueles com requisitos emergentes ou que mudam rapidamente. Foi proposto pelo Jeff Sutherland, e o guia completo do Scrum é constantemente atualizado e disponibilizado em português <a href="https://scrumguides.org/index.html">aqui</a>.</p>

<blockquote class="block-tip">
  <h5 id="objetivo">Objetivo</h5>

  <p>O principal objetivo do Scrum é oferecer um framework ágil para o desenvolvimento, entrega e sustentação de produtos complexos. 
Ele busca otimizar a colaboração e a comunicação entre as equipes, otimizando assim a produtividade e entrega.</p>
</blockquote>

<p>Uma das características essenciais do Scrum é a formação de um time colaborativo, multifuncional e auto-organizado. A equipe é responsável pela entrega do produto e deve trabalhar de forma alinhada e conjunta para alcançar os objetivos definidos. No Scrum, o processo é dividido em sprints, períodos de tempo curtos que geralmente variam entre uma a quatro semanas, nos quais o time se concentra em uma parte específica do produto e trabalha para entregá-la até o final da sprint.</p>

<p>O Scrum é composto por atribuições/papéis, eventos e artefatos. Os papéis incluem o Scrum Master, o Product Owner e o time de desenvolvimento. Os eventos incluem a sprint, a reunião diária, a revisão da sprint e a retrospectiva da sprint. Os artefatos incluem a lista do produto, a lista da sprint e o incremento do produto. Por ser um framework flexível e adaptável, o Scrum pode ser utilizado em diferentes tipos de projetos, desde que a equipe esteja comprometida com os valores e princípios do framework. A Figura abaixo ilustra o Scrum, no qual as cores distiguem os papeis, dos rituais (reuniões) e</p>

<p><img src="../assets/figs/scrum.png" alt="image" /></p>

<h3 id="extreme-programming-xp---produtividade-do-código">Extreme Programming (XP) - Produtividade do Código</h3>

<p>Extreme Programming, conhecido como XP, busca unir toda a equipe de desenvolvimento de software em torno de metas comuns e alcançáveis. Usando os valores e princípios do XP, as equipes aplicam as práticas apropriadas em seu próprio contexto, escolhendo aquelas que incentivam a criatividade humana e aceitam a fragilidade humana. Equipes XP produzem software de qualidade a um ritmo sustentável.</p>

<blockquote class="block-tip">
  <h5 id="objetivo-1">Objetivo</h5>

  <p>O principal objetivo do XP é alcançar resultados de software excepcionais, com um desenvolvimento mais eficiente e efetivo e menos defeitos do que é esperado atualmente 
Ele busca otimizar a colaboração e a comunicação entre as equipes, otimizando assim a produtividade e entrega.</p>
</blockquote>

<p>O XP busca alcançar esses objetivos celebrando e atendendo às necessidades humanas de todos os envolvidos no desenvolvimento de software, desde patrocinadores, gerentes, testadores, usuários até programadores. Embora o XP tenha começado como uma metodologia para equipes pequenas que trabalham em projetos internos, equipes em todo o mundo usam o XP para projetos em grande escala, incorporados e embalados.</p>

<p><img src="../assets/figs/xp1.png" alt="image" /></p>

<p>Princípios</p>

<ul>
  <li>Humanity Economics</li>
  <li>
    <p>Mutual Benefit</p>
  </li>
  <li>Self-Similarity</li>
  <li>Improvement</li>
  <li>Diversity</li>
  <li>Reflection</li>
  <li>Flow</li>
  <li>Opportunity</li>
  <li>Redundancy</li>
  <li>Failure</li>
  <li>Quality</li>
  <li>Baby Steps</li>
  <li>Accepted Responsibility</li>
</ul>

<p>Abaixo, segue uma breve definição de cada uma das práticas:</p>

<ul>
  <li><strong>Sentar Juntos</strong>: os membros da equipe trabalham juntos em um mesmo espaço físico para facilitar a comunicação e a colaboração.</li>
  <li><strong>Time Inteiro</strong>: toda a equipe, incluindo desenvolvedores, testadores e gerentes de projeto, é responsável pelo sucesso do projeto.</li>
  <li><strong>Ambiente de Trabalho Informativo</strong>: o ambiente de trabalho é organizado de forma a fornecer informações relevantes para o projeto, como gráficos de progresso e histórico de bugs.</li>
  <li><strong>Trabalho Energizado</strong>: a equipe trabalha em um ritmo sustentável, evitando sobrecarga e fadiga.</li>
  <li><strong>Programação em Pares</strong>: dois programadores trabalham juntos em um mesmo computador, colaborando na resolução de problemas e na revisão de código.</li>
  <li><strong>Stories</strong>: o desenvolvimento é baseado em histórias de usuário, que descrevem as funcionalidades desejadas pelo cliente.</li>
  <li><strong>Ciclos Semanais</strong>: o desenvolvimento é dividido em ciclos semanais, com reuniões de planejamento e revisão.</li>
  <li><strong>Ciclos Trimestrais</strong>: o desenvolvimento é dividido em ciclos trimestrais, com reuniões de planejamento e revisão de longo prazo.</li>
  <li><strong>Slack(folga)</strong>: é reservado um tempo para que os desenvolvedores possam trabalhar em atividades não relacionadas diretamente ao projeto.</li>
  <li><strong>Build de 10 minutos</strong>: o processo de compilação do código é rápido, levando no máximo 10 minutos.</li>
  <li><strong>Integração Contínua</strong>: as alterações no código são integradas e testadas continuamente, evitando conflitos e erros.</li>
  <li><strong>Desenvolvimento Orientado a Teste (TDD)</strong>: os testes são escritos antes do código, garantindo que as funcionalidades estejam sendo implementadas corretamente.</li>
  <li><strong>Arquitetura Incromental</strong>: o design do software é evoluído de forma incremental, baseado nas necessidades do cliente.</li>
  <li><strong>Envolvimento do Cliente Real</strong>: o cliente é envolvido diretamente no processo de desenvolvimento, fornecendo feedback constante.</li>
  <li><strong>Implantação Incremental</strong>: as funcionalidades são entregues de forma incremental, permitindo que o cliente/usuário comece a utilizá-las antes do produto estar completo.</li>
  <li><strong>Continuidade do Time</strong>: a equipe permanece a mesma ao longo do projeto, evitando mudanças bruscas e perda de conhecimento.</li>
  <li><strong>Redução de Times</strong>: a equipe é reduzida ao longo do projeto, evitando desperdício de recursos.</li>
  <li><strong>Análise da Causa Raiz</strong>: os problemas são analisados profundamente, buscando identificar suas causas raízes.</li>
  <li><strong>Código Compartilhado</strong>: o código é compartilhado entre os membros da equipe, permitindo que o conhecimento seja disseminado e a colaboração seja facilitada.</li>
  <li><strong>Códigos e Testes</strong>: o código e os testes são considerados igualmente importantes, garantindo a qualidade do produto.</li>
  <li><strong>Base de Código Único</strong>: todo o código é armazenado em um mesmo repositório, facilitando a colaboração e a integração.</li>
  <li><strong>Implantação Diária</strong>: as alterações são implantadas diariamente no ambiente de produção, garantindo que o cliente tenha acesso às funcionalidades mais recentes.</li>
  <li><strong>Contrato com Escopo Negociado</strong>: o contrato é baseado em um escopo negociado com o cliente, permitindo que as necessidades do cliente sejam atendidas de forma mais eficiente.</li>
</ul>

<h3 id="spotify---escalando-times-ágeis">Spotify - Escalando Times Ágeis</h3>

<p>O Método Agile Spotify é uma abordagem de gestão de projetos que foi criada pela Spotify. Essa metodologia foi desenvolvida para atender às necessidades da empresa, que precisava de uma forma mais eficiente de gerenciar grandes equipes.</p>

<p>O Método Agile Spotify é baseado em princípios ágeis e consiste em uma estrutura organizacional flexível que permite que pequenas equipes trabalhem de forma autônoma e colaborativa. Com objetivo de otimizar a comunicação e colaboração entre equipes ágeis, o método traz duas camadas principais: <strong>Squads</strong> e <strong>Tribos</strong>. Os <strong>Squads</strong> são equipes pequenas e autônomas que trabalham em um projeto específico. As <strong>Tribos</strong> são formadas por vários <strong>Squads</strong> que trabalham juntos em um objetivo comum. Além disso, a metodologia utiliza ritos ágeis como sprints, revisões e retrospectivas para garantir uma entrega contínua de valor ao cliente.</p>

<p>As <strong>Guildas</strong> são grupos informais de pessoas com interesses em comum, que se reúnem regularmente para compartilhar conhecimento, trocar ideias e colaborar em projetos. As <strong>Guildas</strong> na Spotify são compostas por membros de diferentes Squads e Tribes, que têm interesses em comum, como design, tecnologia, marketing, entre outros. Esses grupos são criados organicamente e não são hierárquicos, o que significa que qualquer pessoa pode participar e contribuir para o grupo.</p>

<p>O objetivo das guildas é criar um espaço para o compartilhamento de conhecimento e colaboração, promovendo a inovação e a criatividade. Os membros das guildas são incentivados a compartilhar suas experiências e ideias, bem como a fornecer feedback uns aos outros. Dessa forma, as guildas ajudam a criar uma cultura de aprendizado contínuo.</p>

<p>A Figura abaixo mostra a estrutura organizacional ágil que permite que grandes empresas, como a Spotify, gerenciem projetos de forma eficiente e inovadora. Vale ressaltar que os <strong>Squads</strong> adotam práticas ágeis tanto do XP (Extreme Programming) quanto do Scrum, como sprints, retrospectivas, revisões, pareamento, entre outras. As equipes autônomas dos <strong>Squads</strong> são capazes de responder rapidamente às mudanças nas necessidades dos clientes e do mercado, enquanto as <strong>Tribos</strong> e <strong>Guildas</strong> permitem a colaboração entre diferentes áreas da empresa.</p>

<p><img src="../assets/figs/spotify.png" alt="image" /></p>

<h3 id="entrega-contínua-e-devops">Entrega contínua e DevOps</h3>

<p>DevOps é uma evolução do movimento ágil. DevOps é um esforço colaborativo e multidisciplinar dentro de uma organização para automatizar a entrega contínua de novas versões de software, garantindo sua correção e confiabilidade. Do ponto de vista organizacional, o movimento DevOps promove uma colaboração mais próxima entre desenvolvedores e operadores.</p>

<p>No livro (Continuous Delivery)[1], Humble defende um pipeline de implantação automatizado, no qual qualquer versão de software comitada no repositório deve ser uma versão candidata à produção. Depois de passar por <em>stages</em>, como compilação e testes automatizados, o software é enviado para produção com o apertar de um botão. Este processo é chamado de Entrega Contínua (<em>Continuous Delivery</em>). Uma variante é o Deploy Contínuo, que envia automaticamente para produção toda versão que passa pelo pipeline. Muitos autores relacionam DevOps com entrega e deploy contínuos.</p>

<h1 id="ciclo-de-desenvolvimento-de-projeto-de-software">Ciclo de Desenvolvimento de Projeto de Software</h1>

<p>Independente do tamanho, complexidade do produto a ser desnvolvido, do tamanho e maturidade da equipe de desenvolvimento,  qualquer projeto de software é um processo complexo e pode ser dividido em várias etapas, cada uma com suas próprias disciplinas e atividades específicas. Quanto as macro etapas de um ciclo de projeto de software, a figura abaixo ilustra tais etapas.</p>

<p><img src="../assets/figs/LDSP.png" alt="image" /></p>

<ul>
  <li>
    <p><strong>Planejamento</strong>: Esta etapa é fundamental para o sucesso do projeto de software. Envolve a identificação dos objetivos do projeto, a definição dos requisitos do sistema, a análise de riscos e a definição do escopo do projeto.</p>
  </li>
  <li>
    <p><strong>Análise</strong>: Nesta etapa, os requisitos do sistema são analisados em detalhes. Isso inclui a identificação de requisitos funcionais e não funcionais, a definição da arquitetura do sistema e a elaboração de modelos de dados.</p>
  </li>
  <li>
    <p><strong>Arquitetura</strong>: Na etapa de design, os modelos de dados são transformados em projetos técnicos e os requisitos funcionais são traduzidos em projetos de software. Isso inclui a definição das interfaces do usuário, a elaboração de diagramas de classe e a escolha das ferramentas e tecnologias a serem utilizadas.</p>
  </li>
  <li>
    <p><strong>Implementação</strong>: Nesta etapa, o código-fonte é escrito com base no projeto técnico. Isso envolve a codificação, testes unitários e a integração de diferentes módulos do software.</p>
  </li>
  <li>
    <p><strong>Testes (Verificação e Validação)</strong>: Na etapa de testes, o software é testado em diferentes níveis, incluindo testes de unidade, testes de integração e testes de sistema. Isso ajuda a identificar defeitos e garantir que o software atenda aos requisitos definidos.</p>
  </li>
  <li>
    <p><strong>Implantação</strong>: Na etapa de implantação, o software é instalado e configurado em um ambiente de produção. Isso pode incluir a migração de dados, a instalação de software de terceiros e a configuração de hardware.</p>
  </li>
</ul>

<p>Além das etapas mencionadas anteriormente, é importante destacar que o desenvolvimento de software envolve diversas disciplinas, tais como programação, gerenciamento de projetos, análise de negócios, engenharia de software, testes de software, qualidade de software e segurança de software. Cada uma dessas disciplinas desempenha um papel importante no processo de desenvolvimento de software, contribuindo para garantir a qualidade e efetividade do produto final. Algumas das disciplinas mais comuns em um projeto de software são:</p>

<ul>
  <li>
    <p><strong>Engenharia de requisitos</strong>: Esta disciplina envolve a coleta,  documentação e gestão dos requisitos do software, incluindo os requisitos funcionais e não funcionais, para que se possa desenvolver um plano de projeto.</p>
  </li>
  <li>
    <p><strong>Arquitetura de software</strong>: Esta disciplina envolve o projeto da estrutura do software, incluindo a definição das camadas, componentes e serviços, e a determinação da interação entre eles.</p>
  </li>
  <li>
    <p><strong>Design de software</strong>: Esta disciplina envolve a criação de modelos de design detalhados para cada componente ou serviço do software, incluindo interfaces de usuário, bancos de dados, APIs e outras partes.</p>
  </li>
  <li>
    <p><strong>Desenvolvimento de software</strong>: Esta disciplina envolve a implementação do software com base no design e na arquitetura definidos. Isso geralmente inclui a codificação, testes e integração.</p>
  </li>
  <li>
    <p><strong>Teste de software</strong>: Esta disciplina envolve a verificação e validação do software para garantir que ele atenda aos requisitos especificados e funcione corretamente.</p>
  </li>
  <li>
    <p><strong>Gerenciamento de projetos</strong>: Esta disciplina envolve a coordenação do planejamento, execução e monitoramento do projeto de software, incluindo o gerenciamento de recursos, prazos, orçamentos e riscos.</p>
  </li>
  <li>
    <p><strong>Implantação de software</strong>: Esta disciplina envolve a distribuição e instalação do software em um ambiente de produção, incluindo a configuração e gerenciamento de servidores e sistemas.</p>
  </li>
</ul>

<p>Após a fase de implementação, há uma etapa crucial no ciclo de vida do software: a manutenção. Essa fase consiste em um conjunto de atividades que visam garantir a continuidade da operação do software após sua implantação. A manutenção contínua é necessária para corrigir defeitos, atualizar dependências, implementar novas funcionalidades, refatorar código, aplicar patches de segurança e garantir que o software continue a funcionar corretamente. Essa fase pode ser subdividida em manutenção corretiva, preventiva e evolutiva, cada uma com seus próprios objetivos e atividades específicas.</p>

<p>É importante destacar que o entregável varia de acordo com as necessidades e objetivos do projeto. É responsabilidade do gerente de projeto definir claramente o entregável e as etapas necessárias para chegar a ele, garantindo que o projeto seja concluído com sucesso e dentro do prazo e orçamento previstos. Dependendo do objetivo do projeto, do tempo e investimento,  o entregável ao fim de um ciclo de projeto pode ser:</p>

<ul>
  <li><strong>Protótipo</strong>: um protótipo é uma versão preliminar do software, geralmente usada para testar conceitos e validar requisitos de usuário. É comum que um protótipo contenha apenas uma pequena parte das funcionalidades finais do software.</li>
  <li><strong>Prova de conceito (PoC)</strong>: É uma demonstração de um conceito ou ideia para verificar a sua viabilidade ou para avaliar se é possível implementar algo. Geralmente, a PoC é uma versão simplificada do produto ou solução final, desenvolvida para validar a tecnologia, a arquitetura ou as funcionalidades-chave do projeto.</li>
  <li><strong>Mínimo Produto Viável (MVP)</strong>: É a versão mais básica de um produto ou serviço que pode ser lançada no mercado para validar a sua aceitação pelos clientes. O MVP é desenvolvido com o objetivo de obter feedback dos usuários e testar hipóteses sobre o produto, sem a necessidade de investir muito tempo e recursos em seu desenvolvimento.</li>
  <li><strong>Release de software</strong>: É a versão de um produto de software que é lançada para uso público. A release inclui as funcionalidades desenvolvidas e testadas até aquele momento, com o objetivo de fornecer aos usuários uma versão estável e confiável do produto. Cada release é numerada e pode incluir correções de bugs, melhorias de desempenho e novas funcionalidades em relação às versões anteriores. As releases são normalmente numeradas seguindo um esquema de versionamento, como o SemVer (Semantic Versioning).</li>
</ul>

<h2 id="ciclo-de-projeto-ágil">Ciclo de Projeto Ágil</h2>

<p><img src="../assets/figs/project-cycle_agile.png" alt="image" /></p>

<h1 id="práticas-ágeis">Práticas Ágeis</h1>

<h2 id="produtividade-da-equipe">Produtividade da Equipe</h2>

<ul>
  <li>
    <p>Planejamento: é uma reunião que ocorre no início de cada iteração ou sprint, em que a equipe define quais serão as tarefas que serão realizadas durante aquele período de tempo. O objetivo do planejamento é definir quais as histórias de usuário ou itens de backlog que serão implementados e como serão implementados. Durante o planejamento, a equipe deve estimar o tempo e recursos necessários para a conclusão de cada tarefa.</p>
  </li>
  <li>
    <p>Review: é uma reunião que ocorre ao final de cada iteração ou sprint, em que a equipe apresenta as funcionalidades implementadas para o cliente ou para o Product Owner. O objetivo da revisão é demonstrar o progresso do projeto, obter feedback e identificar oportunidades de melhoria. Durante a revisão, a equipe deve mostrar as funcionalidades implementadas e explicar como elas atendem às necessidades do cliente.</p>
  </li>
  <li>
    <p>Retrospectiva: é uma reunião que ocorre ao final de cada iteração ou sprint, em que a equipe analisa o processo de desenvolvimento e identifica oportunidades de melhoria. O objetivo da retrospectiva é identificar o que funcionou bem e o que pode ser melhorado, e definir ações para implementar as melhorias identificadas. Durante a retrospectiva, a equipe deve discutir os problemas enfrentados durante a iteração, as soluções encontradas e como melhorar o processo de desenvolvimento para a próxima iteração.</p>
  </li>
  <li>
    <p>Stand-up: é uma reunião diária de curta duração, geralmente realizada no início do dia de trabalho, em que a equipe discute o progresso do projeto e identifica possíveis obstáculos. O objetivo do stand-up é manter a equipe alinhada e informada sobre o que está sendo feito e quais são as prioridades para aquele dia. Durante o stand-up, cada membro da equipe deve responder a três perguntas: o que foi feito desde a última reunião, o que será feito até a próxima reunião e quais são os obstáculos que estão impedindo o progresso. O stand-up é uma reunião rápida e objetiva, que não deve durar mais do que 15 minutos.</p>
  </li>
  <li>Programação em pares (Pair Programming): dois programadores trabalham juntos em um único computador para desenvolver o código, revisando e testando cada linha de código.</li>
  <li>Releases pequenos e frequentes (Small Releases): novas funcionalidades são entregues em pequenos pacotes frequentemente, para obter feedback rápido e permitir mudanças de direção.</li>
  <li>Cliente presente (On-Site Customer): um representante do cliente está presente durante todo o processo de desenvolvimento, para garantir que as necessidades do cliente sejam atendidas.</li>
  <li>Metáfora (Metaphor): uma metáfora é usada para descrever o sistema, tornando mais fácil para os desenvolvedores entenderem a complexidade do sistema.</li>
  <li>
    <p>Ritmo sustentável (Sustainable Pace): a equipe de desenvolvimento trabalha em um ritmo saudável e sustentável, para evitar o esgotamento e manter a qualidade do trabalho.</p>
  </li>
  <li>Sit Together</li>
  <li>Whole Team</li>
  <li>Informative Workspace</li>
  <li>Energized Work</li>
  <li>Pair Programming</li>
  <li>Stories</li>
  <li>Weekly Cycle</li>
  <li>Quarterly Cycle</li>
  <li>Slack</li>
  <li>Ten-Minute Build</li>
  <li>Continuous Integration</li>
  <li>Test-First Programming</li>
  <li>Incremental Design</li>
</ul>

<h2 id="métricas-ágeis">Métricas Ágeis</h2>

<h3 id="reuniões-por-que-elas-existem">Reuniões: por que elas existem?</h3>

<p>As reuniões existem para atender à necessidade humana de comunicação e colaboração.  Elas são utilizadas para compartilhar informações importantes, alinhar objetivos e tomar decisões. No entanto, as reuniões devem ser bem organizadas e estruturadas para que sejam eficazes.</p>

<p>É importante ressaltar que a comunicação não é apenas uma questão de informação, mas também de relacionamentos interpessoais. As reuniões permitem que os membros da equipe interajam e se conheçam melhor, o que pode aumentar a coesão e a colaboração.</p>

<p>Embora algumas pessoas possam questionar a necessidade de reuniões e preferir métodos de comunicação mais informais, é importante lembrar que as reuniões são uma oportunidade para envolver toda a equipe e obter feedback de todas as partes interessadas. Além disso, as reuniões podem ajudar a minimizar conflitos e garantir que todas as informações sejam compreendidas corretamente.</p>

<p>Por fim, é importante destacar que a pessoa que lidera a reunião desempenha um papel fundamental no sucesso da mesma. É essencial que a pessoa Tech Lead seja capaz de manter a reunião focada, garantir que todos os membros da equipe tenham a oportunidade de falar e incentivar a participação ativa de todos os envolvidos.</p>

<p>Em resumo, as reuniões são uma ferramenta valiosa para a comunicação e colaboração em ambientes de trabalho, mas devem ser bem organizadas e estruturadas para serem eficazes. A pessoa Tech Lead tem um papel fundamental no sucesso da reunião, e a comunicação é importante não apenas para transmitir informações, mas também para construir relacionamentos interpessoais e aumentar a coesão da equipe.</p>

<h3 id="papel-do-scrum-masterteach-lead-na-reunião">Papel do Scrum Master/Teach Lead na reunião?</h3>

<p>As reuniões são sustentadas por quatro pilares fundamentais que guiam todas as ações e atitudes do Scrum Master. Esses pilares são: guiar as pessoas, criar conexões, observar e intervir e consenso ou consentimento.</p>

<p>Guiar as pessoas envolve criar um ambiente seguro e confortável para que os participantes possam expressar suas opiniões. Criar conexões é essencial para que todos se sintam ouvidos e suas opiniões conectadas, gerando confiança entre o grupo. A pessoa Tech Lead deve ter uma escuta ativa e estar atenta para perceber se o grupo está caminhando rumo ao objetivo do encontro.</p>

<p>Observar e intervir é a base para estimular a eficiência do processo, permitindo que a pessoa Tech Lead identifique elementos que possam prejudicar a eficácia do encontro e saiba como agir em relação a eles. E, finalmente, o consenso ou consentimento é fundamental para garantir que o grupo possa tomar decisões equilibradas, identificando a melhor abordagem para a tomada de decisão e evitando que o processo se torne custoso para a organização.</p>

<p>Ao seguir esses quatro pilares, a pessoa Tech Lead pode conduzir reuniões e encontros de forma mais eficaz, garantindo que todos os participantes possam contribuir e que as decisões tomadas sejam equilibradas e bem-sucedidas.</p>

<p>Os erros e acertos são oportunidades excelentes para aprender e evoluir na habilidade de facilitação. É importante lembrar que essa é uma habilidade que requer prática e aperfeiçoamento contínuos. Nós, autores, estamos nessa jornada junto com você.</p>

<p>Para ajudá-lo a evitar alguns dos erros comuns na facilitação, gostaríamos de compartilhar alguns dos erros communs já observados na disciplina: tentar resolver todos os problemas em uma única reunião, falta de energia da pessoa facilitadora ou do grupo, e não alinhar o contexto e objetivo da reunião. Para mais detalhes sobre cada um desses erros, você pode consultar nosso livro A Arte da Facilitação.
A importância de reconhecer e aprender com nossos erros e acertos é fundamental para a evolução profissional. Devemos estar abertos a cometer erros e aprender com eles, pois nenhuma jornada é construída apenas com sucessos.</p>

<h3 id="problemas-que-podem-ocorrer-nas-reuniões">Problemas que podem ocorrer nas reuniões</h3>

<p>As reuniões podem ser altamente produtivas e eficazes, mas também estão sujeitas a uma série de disfunções que podem prejudicar seu propósito e resultados. Algumas das disfunções comuns incluem bate-boca e confronto, falta de tempo disponível, voltar à estaca zero e lidar com um grande número de pessoas e suas contribuições. No entanto, existem estratégias que as pessoas Tech Leads podem usar para minimizar essas disfunções e maximizar a eficácia da reunião.</p>

<p>Em caso de bate-boca e confronto, é recomendado fazer uma pausa estratégica ou até mesmo cancelar a reunião para evitar conflitos desnecessários e manter o objetivo da reunião. Para lidar com a falta de tempo disponível, a estratégia de timeboxing é uma boa opção, permitindo que os participantes se concentrem em tópicos prioritários e evitem discussões irrelevantes.</p>

<p>Quando um grupo volta à estaca zero, pode ser útil criar um glossário com definições importantes para o entendimento geral do grupo e revisar periodicamente essas definições para manter a progressão do grupo.</p>

<p>Ao lidar com um grande número de pessoas, a pessoa Tech Lead deve buscar o consentimento do grupo para garantir uma tomada de decisão equilibrada e evitar uma decisão catastrófica.</p>

<p>Com essas estratégias em mente, a pessoa Tech Lead pode garantir uma reunião produtiva e eficaz para todos os participantes.</p>

<h2 id="reunião-diária-em-pé">Reunião diária em pé</h2>

<p>A reunião diária em pé, também conhecida como “daily scrum” e “stand up”, é uma breve atualização de status em que toda a equipe se reúne diariamente.  São uma solução recorrente para um conjunto particular de problemas que surgem quando um grupo de pessoas tenta trabalhar juntas como equipe. Ficamos em pé para manter a reunião curta. Cada membro da equipe deve responder a 3 perguntas relativas as suas atividades no projeto: (1) o que fez ontem, (2) o que planeja fazer hoje, (3) quais são os problemas que tem enfrentado para realizar seu trabalho.  No entanto, essa definição simples não captura os detalhes sutis que distinguem uma reunião efetiva de uma perda de tempo. As reuniões diárias bem conduzidas agregam um valor significativo às equipes. Primeiro, é uma forma de manter o ritmo de trabalho, uma vez que diariamente a equipe deve compartilhar seu diário de bordo. Segundo, para gestores e lideres de projeto, é uma forma de identificar riscos no projeto (tarefas complexas, dependências organizacionais etc) e agir o mais rápido possivel para destravar essas travas de produtividades. Outros benefícios de sincronizar regularmente as equipes no stand up para:</p>

<ul>
  <li>
    <p>Compartilhar problemas e melhorias. Um dos principais benefícios de uma equipe em relação ao trabalho individual é que os membros da equipe podem se ajudar quando alguém encontra um problema ou descobre uma maneira melhor de fazer algo. Uma “equipe” em que os membros da equipe não se sentem confortáveis em compartilhar problemas e/ou não se ajudam tende a ser ineficaz. Problemas podem ser identificados no stand-up, os membros da equipe que podem ajudar a resolve-los mapeados, e após o stand-up essas pessoas se reúnem para planejar a solução.</p>
  </li>
  <li>
    <p>Compartilhar a compreensão dos objetivos. Mesmo que tenhamos pensado que entendemos uns aos outros no início (o que provavelmente não era o caso), nossa compreensão tende a se afastar, assim como o contexto em que estamos operando. Uma “equipe” em que cada membro está trabalhando em direção a objetivos diferentes tende a ser ineficaz.</p>
  </li>
  <li>
    <p>Coordenar esforços. Se o trabalho não precisa ser coordenado, você não precisa de uma equipe. Por outro lado, se você tem uma equipe, presumo que o trabalho exija coordenação. Uma coordenação deficiente entre os membros da equipe tende a levar a resultados ruins.</p>
  </li>
  <li>
    <p>Identificar-se como equipe. É muito difícil identificar-se psicologicamente com um grupo se você não se envolver regularmente com o grupo. Você não desenvolverá um forte senso de relacionamento mesmo que acredite que eles sejam capazes e busquem os mesmos objetivos.</p>
  </li>
</ul>

<p>Time alinhado
Troca de conhecimento
Como começar?
Erros mais comuns de uma reunião em pé</p>

<h2 id="melhoria-contínua-com-retrospectivas">Melhoria contínua com retrospectivas</h2>

<h2 id="feedback">Feedback</h2>

<h3 id="checklist-para-tech-lead-em-reuniões">Checklist para Tech Lead em reuniões</h3>

<ul>
  <li>Visibilidade do tempo de duração</li>
  <li>Não seja o centro das atenções</li>
  <li>Dê oportunidade de fala para todos</li>
  <li>Defina um tomador de decisão</li>
  <li>Identifique o efeito pipoca durante a reunião</li>
  <li>Dê espaço para o silêncio</li>
  <li>Faça acordos prévios</li>
  <li>Intervalos regulares</li>
</ul>

<h2 id="produtividade-de-software">Produtividade de Software</h2>

<ol>
  <li>Desenvolvimento guiado por testes (Test Driven Development - TDD): os testes são escritos antes do código, para garantir que a funcionalidade esteja correta e funcionando corretamente.</li>
  <li>Integração contínua (Continuous Integration - CI): o código é integrado e testado automaticamente várias vezes ao dia para evitar conflitos e detectar erros de integração.</li>
  <li>Refactoring: o código é constantemente melhorado para torná-lo mais limpo, legível e fácil de manter.</li>
  <li>Design simples (Simple Design): o código é mantido o mais simples possível para evitar complexidade desnecessária.</li>
  <li>Programação orientada a objetos (Object-Oriented Programming - OOP): o código é organizado em objetos para facilitar a compreensão e a manutenção.</li>
</ol>

<h3 id="atrasos-de-entregas">Atrasos de Entregas</h3>

<p>É importante lembrar que existem muitos outros fatores que podem contribuir para atrasos, como falta de recursos, problemas de comunicação ou mudanças nos requisitos do projeto. No entanto, durante as execuções da metodologia,  os três motivos abaixo são comumente citados como causas de atrasos:</p>

<ul>
  <li><strong>Falta de alinhamento sobre datas e entregáveis</strong>: Quando não há um acordo claro sobre prazos e objetivos, pode haver uma falta de foco e priorização no projeto. Isso pode levar a um atraso na entrega dos trabalhos, uma vez que as equipes não estão trabalhando juntas em direção a um objetivo comum.</li>
  <li><strong>Atraso da Sprint Zero</strong>: A Sprint Zero é uma fase inicial em que a equipe se concentra em preparar o ambiente para o projeto e definir o escopo e os requisitos iniciais. Se essa fase não for concluída a tempo, pode levar a um atraso no início do desenvolvimento do projeto e, consequentemente, no prazo de entrega final. É importante ter uma visão realista do que é necessário para concluir a Sprint Zero com sucesso. Isso inclui alocar tempo e recursos suficientes para realizar todas as tarefas necessárias, incluindo a configuração do ambiente, a definição dos requisitos, a criação de protótipos e a documentação do projeto. Além disso, é importante ter uma comunicação clara entre a equipe e as partes interessadas para que todos entendam o que é necessário para concluir a Sprint Zero e quais são as expectativas para o projeto. Dessa forma, é possível minimizar os riscos de atrasos na Sprint Zero e garantir que o projeto comece com o pé direito.</li>
  <li><strong>Problemas de comunicação</strong>:</li>
  <li><strong>Membros do time com dedicação/ritmo de trabalho heterogêneos</strong>: Quando membros da equipe não alinham o ritmo de trabalho esperados, isso pode afetar a produtividade e a eficiência do projeto, uma vez que há uma curva de aprendizado para os membros se adaptem ao projeto e trabalhem efetivamente. Isso pode resultar em atrasos no desenvolvimento e na entrega do projeto, conflitos entre membros, não compartilhamento do conhecimento, sobrecarga de alguns membros.</li>
</ul>

<h3 id="dicas-para-aumentar-a-produtividade">Dicas para aumentar a produtividade</h3>

<blockquote class="block-tip">
  <h5 id="dica">Dica</h5>

  <p>O principal foco do Onboarding é guiar os membros em um processo de auto aprendizado 
além da mentoria/liderança serem crucial para o compartilhamento de práticas e cultura</p>
</blockquote>]]></content><author><name>Carla Rocha</name></author><category term="Jekyll" /><summary type="html"><![CDATA[Agilidade]]></summary></entry><entry><title type="html">Software Livre</title><link href="http://localhost:4000/Onboarding/jekyll/2023-02-22-OSS.html" rel="alternate" type="text/html" title="Software Livre" /><published>2023-02-22T00:00:00-03:00</published><updated>2023-02-22T00:00:00-03:00</updated><id>http://localhost:4000/Onboarding/jekyll/OSS</id><content type="html" xml:base="http://localhost:4000/Onboarding/jekyll/2023-02-22-OSS.html"><![CDATA[<blockquote class="block-tip">
  <h5 id="ideia-principal">Ideia Principal</h5>

  <p>Comunidades de Software adotam práticas, ferramentas e automações utilizadas no mercado.
Assim como os padrões de gestão de projeto de software,  documentação, e comunicação.</p>
</blockquote>

<h1 id="o-que-é-software-livre">O que é software Livre</h1>

<h1 id="qual-a-diferença-do-software-livre-e-open-source">Qual a diferença do Software Livre e Open Source</h1>

<h1 id="principais-práticas-de-comunidades-de-software-livreopen-source">Principais práticas de Comunidades de Software Livre/Open Source</h1>

<h1 id="saiba-mais-sobre-software-livre">Saiba mais sobre Software Livre</h1>

<p>Caso você tenha interesse em aprofundar seus conhecimentos Software Livre, como contribuir em comunidades de Software Livre seguem abaixo algumas referências úteis:</p>]]></content><author><name>Carla Rocha</name></author><category term="Jekyll" /><summary type="html"><![CDATA[Ideia Principal Comunidades de Software adotam práticas, ferramentas e automações utilizadas no mercado. Assim como os padrões de gestão de projeto de software, documentação, e comunicação.]]></summary></entry><entry><title type="html">Processo de Onboarding - Princípios básicos</title><link href="http://localhost:4000/Onboarding/jekyll/2023-02-21-Onboarding.html" rel="alternate" type="text/html" title="Processo de Onboarding - Princípios básicos" /><published>2023-02-21T00:00:00-03:00</published><updated>2023-02-21T00:00:00-03:00</updated><id>http://localhost:4000/Onboarding/jekyll/Onboarding</id><content type="html" xml:base="http://localhost:4000/Onboarding/jekyll/2023-02-21-Onboarding.html"><![CDATA[<blockquote class="block-tip">
  <h5 id="ideia-principal">Ideia Principal</h5>

  <p>O principal foco do Onboarding é guiar novos desenvolvedores na adoção de práticas e cultura organizacionais, 
além da mentoria/liderança serem crucial para o compartilhamento.</p>
</blockquote>

<p>Quando engenheiros de software são contratados por uma empresa, eles precisam passar por um período de adaptação para se ajustarem à cultura, práticas, processos e ferramentas da organização. Esse período de adaptação técnica e cultural pode durar meses e é geralmente considerado um período improdutivo, uma vez que a ênfase é no aprendizado de uma nova maneira de trabalhar.</p>

<p>Durante esse período, os novos colaboradores (newcomers) podem enfrentar várias barreiras ao serem incorporados em um novo projeto de desenvolvimento de software, incluindo:</p>
<ul>
  <li><strong>Barreiras pessoais</strong>, que incluem a relutância dos recém-chegados em pedir ajuda a seus colegas no início de seus processos de resolução de problemas por medo de perder tempo</li>
  <li><strong>Barreiras interpessoais</strong>, que, por exemplo, referem-se a problemas de comunicação que surgem quando os recém-chegados são incorporados a uma equipe diversificada, no qual pessoas diferentes com objetivos diferentes, culturas diferentes e habilidades interpessoais diferentes se reúnem</li>
  <li><strong>Barreiras de processo</strong>, onde os recém-chegados encontram dificuldades em ter uma perspectiva holística do software para o qual estão contribuindo e em descobrir por onde começar a trabalhar</li>
  <li><strong>Barreiras técnicas</strong>, os recém-chegados frequentemente encontram problemas devido à alta complexidade dos sistemas que estão sendo desenvolvidos. Este problema é acompanhado pela falta de conhecimento prévio do domínio onde ocorre o desenvolvimento</li>
</ul>

<p>Quando novos engenheiros de software são incorporados a uma equipe, eles precisam passar por um processo de adaptação que pode ser desafiador. Essas barreiras podem resultar em atrasos no projeto e aumento nos custos, já que a incorporação de novos desenvolvedores pode levar mais tempo para a conclusão de tarefas importantes. Além disso, a qualidade do software desenvolvido pode ser comprometida, uma vez que os recém-chegados podem cometer erros ou não seguir as melhores práticas adotadas pela equipe.</p>

<p><img src="../assets/figs/suporteOnboarding.png" alt="image" /></p>

<p>Quando novos engenheiros de software são incorporados a uma equipe, eles precisam passar por um processo de adaptação que pode ser desafiador. Essas barreiras podem resultar em atrasos no projeto e aumento nos custos, já que a incorporação de novos desenvolvedores pode levar mais tempo para a conclusão de tarefas importantes. Além disso, a qualidade do software desenvolvido pode ser comprometida, uma vez que os recém-chegados podem cometer erros ou não seguir as melhores práticas adotadas pela equipe.</p>

<p>Para superar essas barreiras, é fundamental implementar estratégias eficazes de <em>Onboarding</em>, ou integração, de novos colaboradores (<em>newcomers</em>). O <strong>onboarding</strong> é o processo de incorporar novos desenvolvedores em uma equipe de software, que inclui o uso de ferramentas e tecnologias para facilitar a comunicação e a colaboração entre a equipe. Isso também inclui a criação de um ambiente de trabalho acolhedor e inclusivo que incentiva os recém-chegados a pedir ajuda e compartilhar conhecimento, além da implementação de treinamentos e orientações adequados para ajudar os novos desenvolvedores a compreender melhor o processo de desenvolvimento e os sistemas em que estão trabalhando.</p>

<p>Para que o processo de <strong>onboarding</strong> seja eficaz, é importante que a empresa tenha uma cultura de integração, processos bem definidos e ferramentas adequadas para apoiar a atividade. Os processos bem definidos estabelecem o que deve ser feito em cada etapa do <strong>onboarding</strong>, enquanto as ferramentas incluem desde sistemas de gestão de aprendizagem até manuais e guias que ajudam os novos colaboradores a se orientarem na empresa.</p>

<p>Em produtos de software, o <strong>onboarding</strong> de novos colaboradores pode ser ainda mais complexo, pois as equipes trabalham em sistemas complexos e altamente personalizáveis. Os novos desenvolvedores precisam entender os diferentes componentes e variantes dos produtos, bem como as práticas e convenções de desenvolvimento específicas da equipe. Esse processo pode levar várias semanas ou até meses, o que pode ter um impacto significativo na produtividade da equipe e na qualidade do software produzido. Por isso, é importante que as equipes contem com a ajuda de mentorias, onde os desenvolvedores mais experientes trabalham em estreita colaboração com os novos membros da equipe para ajudá-los a se adaptarem ao novo ambiente de trabalho.</p>

<p>O processo de onboarding pode variar de acordo com a empresa, mas geralmente envolve as seguintes etapas:</p>

<ul>
  <li><strong>Boas-vindas</strong>: Nesta etapa, o novo colaborador é recebido pela equipe e apresentado à empresa, incluindo a missão, visão e valores.</li>
  <li><strong>Introdução</strong>: O novo colaborador recebe informações sobre a cultura e os processos da empresa, além de conhecer os colegas de trabalho.</li>
  <li><strong>Treinamento</strong>: O novo colaborador recebe o treinamento necessário para desempenhar suas funções.</li>
  <li><strong>Desafios iniciais</strong>: O novo colaborador recebe tarefas e projetos menores para se adaptar gradualmente ao ambiente de trabalho e ganhar confiança.</li>
  <li><strong>Feedback</strong>: É importante que a empresa ofereça um feedback constante para o novo colaborador sobre seu desempenho e orientações sobre como melhorar.</li>
  <li><strong>Acompanhamento</strong>: Durante as primeiras semanas, é importante que o novo colaborador receba um acompanhamento para esclarecer dúvidas e orientá-lo sobre as expectativas da empresa.</li>
  <li><strong>Imersão no projeto</strong>: O novo colaborador é apresentado ao projeto ou equipe em que irá trabalhar e recebe informações sobre a metodologia de trabalho e as ferramentas utilizadas.</li>
  <li><strong>Integração contínua</strong>: O processo de onboarding não deve se limitar às primeiras semanas de trabalho, mas deve ser um processo contínuo de integração do novo colaborador à equipe e à cultura da empresa.</li>
</ul>

<p><img src="../assets/figs/boss.png" alt="image" /></p>

<h1 id="saiba-mais-sobre-onboarding">Saiba mais sobre Onboarding</h1>

<p>Caso você tenha interesse em aprofundar seus conhecimentos Onboarding, seguem abaixo algumas referências úteis:</p>]]></content><author><name>Carla Rocha</name></author><category term="Jekyll" /><summary type="html"><![CDATA[Ideia Principal O principal foco do Onboarding é guiar novos desenvolvedores na adoção de práticas e cultura organizacionais, além da mentoria/liderança serem crucial para o compartilhamento.]]></summary></entry><entry><title type="html">Aprendizado Orientado à Experiência - Princípios básicos</title><link href="http://localhost:4000/Onboarding/jekyll/2023-02-20-Experiential-Learning.html" rel="alternate" type="text/html" title="Aprendizado Orientado à Experiência - Princípios básicos" /><published>2023-02-20T00:00:00-03:00</published><updated>2023-02-20T00:00:00-03:00</updated><id>http://localhost:4000/Onboarding/jekyll/Experiential-Learning</id><content type="html" xml:base="http://localhost:4000/Onboarding/jekyll/2023-02-20-Experiential-Learning.html"><![CDATA[<blockquote class="block-tip">
  <h5 id="ideia-principal">Ideia Principal</h5>

  <p>O principal foco do aprendizado orientado à experiência é criar a “jornada de descoberta”, para que 
o aluno tenha aprendizagem autônoma, além de práticas e cultura alinhadas com demandas do mercado</p>
</blockquote>

<p>A aprendizagem orientada a experiência permite que os participantes aprendam de forma significativa e duradoura. Em vez de apenas receber informações teóricas, eles são colocados em situações reais de aprendizado, em que podem aplicar os conceitos teóricos aprendidos e vivenciar na prática os desafios enfrentados na área de engenharia de software.</p>

<p>O modelo de referência importante para a construção de um curso eficaz é o modelo de aprendizagem experiencial de David Kolb (Figura 1). Esse modelo sugere que os alunos precisam passar por uma “jornada de descoberta”, onde eles sentem que ganharam a compreensão da lição por meio do processo experiencial de chegar lá. O ciclo de Kolb é composto de quatro macro etapas principais:</p>

<ol>
  <li><strong>Experiência concreta</strong>: é a fase inicial, onde os participantes são expostos a uma experiência real e concreta, no nosso caso, um projeto de Software.</li>
  <li><strong>Observação reflexiva</strong>: após a experiência, os participantes são incentivados a refletir sobre o que aconteceu, a analisar as causas e consequências e a identificar padrões e tendências.</li>
  <li><strong>Conceitualização abstrata</strong>: com base nas observações e reflexões, os participantes são convidados a formular conceitos, teorias e hipóteses que expliquem o que aconteceu e que possam ser aplicados em outras situações.</li>
  <li><strong>Experimentação ativa</strong>: por fim, os alunos são encorajados a aplicar os conceitos e teorias formulados em novas experiências, para verificar sua validade e eficácia.</li>
</ol>

<p><img src="../assets/figs/experiential-1.png" alt="image" /></p>

<p>Esse ciclo de aprendizagem se repete continuamente, permitindo que os alunos ampliem e aprofundem seus conhecimentos e habilidades ao longo do tempo. Para que esse modelo seja efetivo, é importante que os educadores ofereçam um ambiente seguro e estimulante para as experiências, promovam a reflexão e a discussão das observações, incentivem a formulação de conceitos e teorias e apoiem os alunos em sua experimentação ativa.</p>

<p>Um dos elementos-chave do modelo de aprendizagem experiencial é que ele requer um certo nível de autodescoberta e aprendizagem autônoma.
Para desenvolver essas habilidades em um ciclo de aprendizagem ativa, o estudante/participantes devem passar por quatro macro etapas: <strong>dificuldade</strong>, <strong>estruturar</strong>, <strong>sistematizar</strong> e <strong>sintetizar</strong>.</p>

<p><img src="../assets/figs/experiential-2.png" alt="image" /></p>

<p>A primeira etapa, <strong>de dificuldade</strong> (Struggle), é quando os alunos são desafiados a experimentar algo novo, a se envolver em uma tarefa ou projeto que esteja fora de sua zona de conforto. Nessa fase, o objetivo é criar um senso de urgência e motivação nos alunos, incentivando-os a se engajar ativamente no processo de aprendizagem. Para que o aluno passe sinta a dificuldade, deve ser disponibilizado o mínimo de  informação sobre o projeto, sobre as entregas, e sobre o que é esperado. Assim, a dificuldade sentida impulsiona os participantes a procurar informações, estudar, correr atras do que for necessário para trabalhar.</p>

<p>A segunda etapa, <strong>de estruturar</strong>, envolve ajudar os alunos a organizar suas observações e reflexões, a fim de extrair significado e compreensão a partir de suas experiências. Isso pode ser feito por meio de discussões em grupo, anotações individuais, mind maps ou outras ferramentas que ajudem os alunos a organizar suas ideias.</p>

<p>A terceira etapa, <strong>de sistematizar</strong>, é quando os alunos começam a aplicar conceitos e teorias para dar sentido às suas observações e reflexões. Essa etapa envolve a construção de conexões entre a experiência e o conhecimento adquirido, ajudando os alunos a formular ideias mais amplas e abstratas. Em um contexto de aprendizado ágil, conceitos teóricos e experiências em um ciclo de projeto podem ser aplicados para medir e otimizar a produtividade da equipe, quanto melhorar a qualidade do software desenvolvido guiados pelas práticas XP.</p>

<p>Por fim, a quarta etapa, <strong>de sintetizar</strong>, é quando os alunos consolidam seus aprendizagens, integrando seus novos conhecimentos e habilidades em suas vidas cotidianas. Nessa etapa, é importante incentivar os alunos a refletir sobre o que aprenderam e como podem aplicar suas novas habilidades em sua vida profissional ou pessoal.</p>

<p>Para apoiar essas quatro etapas, uso uma variedade de métodos de ensino digital, como fóruns de discussão online e plataformas de colaboração. Cada método é escolhido com base nas necessidades específicas de cada etapa do processo de aprendizagem, ajudando os alunos a se engajar ativamente e a criar um ambiente de aprendizagem colaborativa e significativa. Na próxima sessão, vamos apresentar como aplicamos os conceitos relacionados a aprendizagem orientada a experiencia para acelerar a imersão em conceitos relacionados à Engenharia de Software.</p>

<h1 id="saiba-mais-sobre-aprendizagem-orientado-à-experiência">Saiba mais sobre Aprendizagem Orientado à Experiência</h1>

<p>Caso você tenha interesse em aprofundar seus conhecimentos na metodologia do Aprendizado Orientado à Experiência (experiential learning), seguem abaixo algumas referências úteis:</p>]]></content><author><name>Carla Rocha</name></author><category term="Jekyll" /><summary type="html"><![CDATA[Ideia Principal O principal foco do aprendizado orientado à experiência é criar a “jornada de descoberta”, para que o aluno tenha aprendizagem autônoma, além de práticas e cultura alinhadas com demandas do mercado]]></summary></entry></feed>